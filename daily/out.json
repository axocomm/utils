{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Once upon a time, there lived an adventurous little girl called Goldilocks.\nShe explored the world with abandon, &lt;a href=\"http://www.ivyjoy.com/fables/goldilocks.html\"&gt;having a lot of fun&lt;/a&gt;.\nDuring her latest foray into the woods, she found another bear home -- though\nthis one is home to many more bears. Having learned from her previous experiences,\nGoldilocks knows that trial and error is not an efficient way of finding the\nright chair and porridge to help herself to.&lt;/p&gt;\n\n&lt;p&gt;The task falls to you: given descriptions of Goldilocks&amp;#39; needs and of the\navailable porridge/chairs at the dinner table, tell Goldilocks which chair to\nsit in so the chair does not break, and the porridge is at an edible temperature.&lt;/p&gt;\n\n&lt;h2&gt;Formal Input&lt;/h2&gt;\n\n&lt;p&gt;The input begins with a line specifying Goldilocks&amp;#39; weight (as an integer in arbitrary\nweight-units) and the maximum temperature of porridge she will tolerate (again\nas an arbitrary-unit integer). This line is then followed by some number of\nlines, specifying a chair&amp;#39;s weight capacity, and the temperature of the porridge\nin front of it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Sample input:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;100 80\n30 50\n130 75\n90 60\n150 85\n120 70\n200 200\n110 100\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Interpreting this, Goldilocks has a weight of 100 and a maximum porridge\ntemperature of 80. The first seat at the table has a chair with a capacity of\n30 and a portion of porridge with the temperature of 50. The second has a\ncapacity of 130 and temperature of 60, etc.&lt;/p&gt;\n\n&lt;h2&gt;Formal Output&lt;/h2&gt;\n\n&lt;p&gt;The output must contain the numbers of the seats that Goldilocks can sit down\nat and eat up. This number counts up from 1 as the first seat.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Sample output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;2 5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Seats #2 and #5 have both good enough chairs to not collapse under Goldilocks,\nand porridge that is cool enough for her to eat.&lt;/p&gt;\n\n&lt;h2&gt;Challenge Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;100 120\n297 90\n66 110\n257 113\n276 191\n280 129\n219 163\n254 193\n86 153\n206 147\n71 137\n104 40\n238 127\n52 146\n129 197\n144 59\n157 124\n210 59\n11 54\n268 119\n261 121\n12 189\n186 108\n174 21\n77 18\n54 90\n174 52\n16 129\n59 181\n290 123\n248 132\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Finally...&lt;/h2&gt;\n\n&lt;p&gt;Have a good challenge idea? Drop by &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and tell us about it!\nJust don&amp;#39;t eat our porridge.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Once upon a time, there lived an adventurous little girl called Goldilocks.\nShe explored the world with abandon, [having a lot of fun](http://www.ivyjoy.com/fables/goldilocks.html).\nDuring her latest foray into the woods, she found another bear home -- though\nthis one is home to many more bears. Having learned from her previous experiences,\nGoldilocks knows that trial and error is not an efficient way of finding the\nright chair and porridge to help herself to.\n\nThe task falls to you: given descriptions of Goldilocks' needs and of the\navailable porridge/chairs at the dinner table, tell Goldilocks which chair to\nsit in so the chair does not break, and the porridge is at an edible temperature.\n\nFormal Input\n------------\n\nThe input begins with a line specifying Goldilocks' weight (as an integer in arbitrary\nweight-units) and the maximum temperature of porridge she will tolerate (again\nas an arbitrary-unit integer). This line is then followed by some number of\nlines, specifying a chair's weight capacity, and the temperature of the porridge\nin front of it.\n\n**Sample input:**\n\n    100 80\n    30 50\n    130 75\n    90 60\n    150 85\n    120 70\n    200 200\n    110 100\n\nInterpreting this, Goldilocks has a weight of 100 and a maximum porridge\ntemperature of 80. The first seat at the table has a chair with a capacity of\n30 and a portion of porridge with the temperature of 50. The second has a\ncapacity of 130 and temperature of 60, etc.\n\nFormal Output\n--------------\n\nThe output must contain the numbers of the seats that Goldilocks can sit down\nat and eat up. This number counts up from 1 as the first seat.\n\n**Sample output:**\n\n    2 5\n\nSeats \\#2 and \\#5 have both good enough chairs to not collapse under Goldilocks,\nand porridge that is cool enough for her to eat.\n\n\nChallenge Input\n----------------------\n\n    100 120\n    297 90\n    66 110\n    257 113\n    276 191\n    280 129\n    219 163\n    254 193\n    86 153\n    206 147\n    71 137\n    104 40\n    238 127\n    52 146\n    129 197\n    144 59\n    157 124\n    210 59\n    11 54\n    268 119\n    261 121\n    12 189\n    186 108\n    174 21\n    77 18\n    54 90\n    174 52\n    16 129\n    59 181\n    290 123\n    248 132\n\nFinally...\n----------\n\nHave a good challenge idea? Drop by /r/dailyprogrammer_ideas and tell us about it!\nJust don't eat our porridge.\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "5bn0b7", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Blackshell", "media": null, "name": "t3_5bn0b7", "score": 62, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/5bn0b7/20161107_challenge_291_easy_goldilocks_bear/", "locked": false, "stickied": false, "created": 1478564102.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/5bn0b7/20161107_challenge_291_easy_goldilocks_bear/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-11-07] Challenge #291 [Easy] Goldilocks' Bear Necessities", "created_utc": 1478535302.0, "link_flair_text": null, "distinguished": null, "num_comments": 101, "visited": false, "num_reports": null, "ups": 62}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;re a farmer in the future. Due to some freak accident, all dogs were wiped out but gophers have multiplied and they&amp;#39;re causing havoc in your fields. To combat this, you bought a robot dog. Only one problem - you have to program it to chase the gophers. &lt;/p&gt;\n\n&lt;p&gt;The robot dogs can run faster than the natural gophers. Assuming that the gopher starts running when it&amp;#39;s been spotted by the dog, the gopher will run in as straight a line as it can towards the nearest hole. The dog can catch the little rascal by cutting off the gopher before it reaches the hole. Assume that if the dog is within a square of the gopher, it&amp;#39;s got it capture (e.g. the dog may beat the gopher to a position, but it&amp;#39;ll be able to snag it). If the gopher sees the dog waiting the gopher will change direction, so it will have to grab it on the run.&lt;/p&gt;\n\n&lt;p&gt;Your task today is to write a program that identifies the best route to run to catch the gopher. Remember - the gopher will run to the nearest hole in a straight line. The dog will run in a straight line, too, you just have to tell it where to go. &lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given several lines. The first line tells you the dog&amp;#39;s position and speed (in units per second) as three numbers: the x and y coordinates then the speed. The next line tells you the gopher&amp;#39;s position as an x and y coordinate position and its speed (in units per second). The next line tells you how many additional lines &lt;em&gt;N&lt;/em&gt; to read, these are the gopher holes. Each of the &lt;em&gt;N&lt;/em&gt; lines tells you a gopher hole as an x and y coordinate. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;10 10 1.0\n1 10 0.25\n2\n0 0\n10 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit the position the dog should run in a straight line to catch the gopher. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The gopher will run to the hole at (0,0). The dog should run to position (1,7) to catch the gopher. &lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;5 3 1.2\n2 8 0.5\n3\n10 1\n11 7\n10 9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;Added clarification that the dog will only catch the gopher on the run. &lt;/p&gt;\n\n&lt;p&gt;This challenge was inspired by a conversation with former moderator XenophonOfAthens.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nYou're a farmer in the future. Due to some freak accident, all dogs were wiped out but gophers have multiplied and they're causing havoc in your fields. To combat this, you bought a robot dog. Only one problem - you have to program it to chase the gophers. \n\nThe robot dogs can run faster than the natural gophers. Assuming that the gopher starts running when it's been spotted by the dog, the gopher will run in as straight a line as it can towards the nearest hole. The dog can catch the little rascal by cutting off the gopher before it reaches the hole. Assume that if the dog is within a square of the gopher, it's got it capture (e.g. the dog may beat the gopher to a position, but it'll be able to snag it). If the gopher sees the dog waiting the gopher will change direction, so it will have to grab it on the run.\n\nYour task today is to write a program that identifies the best route to run to catch the gopher. Remember - the gopher will run to the nearest hole in a straight line. The dog will run in a straight line, too, you just have to tell it where to go. \n\n# Input Description\n\nYou'll be given several lines. The first line tells you the dog's position and speed (in units per second) as three numbers: the x and y coordinates then the speed. The next line tells you the gopher's position as an x and y coordinate position and its speed (in units per second). The next line tells you how many additional lines *N* to read, these are the gopher holes. Each of the *N* lines tells you a gopher hole as an x and y coordinate. Example:\n\n\t10 10 1.0\n\t1 10 0.25\n\t2\n\t0 0\n\t10 0\n\n# Output Description\n\nYour program should emit the position the dog should run in a straight line to catch the gopher. Example:\n\n\t1 7\n\nThe gopher will run to the hole at (0,0). The dog should run to position (1,7) to catch the gopher. \n\n# Challenge Input\n\n\t5 3 1.2\n\t2 8 0.5\n\t3\n\t10 1\n\t11 7\n\t10 9\n\n# Notes\n\nAdded clarification that the dog will only catch the gopher on the run. \n\nThis challenge was inspired by a conversation with former moderator XenophonOfAthens.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "5b5fc8", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_5b5fc8", "score": 44, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1478289519.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/5b5fc8/20161104_challenge_290_hard_gophers_and_robot_dogs/", "locked": false, "stickied": false, "created": 1478314323.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/5b5fc8/20161104_challenge_290_hard_gophers_and_robot_dogs/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-11-04] Challenge #290 [Hard] Gophers and Robot Dogs", "created_utc": 1478285523.0, "link_flair_text": null, "distinguished": null, "num_comments": 10, "visited": false, "num_reports": null, "ups": 44}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Mark saw someone doing experiments with blinking LEDs (imagine something like &lt;a href=\"http://www.batsocks.co.uk/readme/XMegaExamples.htm#Sweep\"&gt;this&lt;/a&gt; ) and became fascinated by it.\nHe wants to know more about it. He knows you are good with computers, so he comes to\nyou asking if you can teach him how it works. You agree, but as you don&amp;#39;t have any\nLEDs with you at the moment, you suggest: &amp;quot;Let&amp;#39;s build an emulator with which we can\nsee what&amp;#39;s happening inside&amp;quot;. And that&amp;#39;s today&amp;#39;s challenge.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1st Part&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The 1st part should be easy, even though the description is rather verbose. If you want\nmore challenge try the 2nd part afterwards.&lt;/p&gt;\n\n&lt;p&gt;Our system has 8 LEDs, we represent their state with a text output. When\nall LEDs are off, it is printed as string of eight dots &amp;quot;........&amp;quot;. When a led is on,\nit is printed as &amp;quot;*&amp;quot;. LED-0 is on the right side (least significant bit), LED-7 is on the\nleft side. Having LEDs 0 and 1 on and all others off is written as &amp;quot;......**&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;On input you get a sequence of lines forming a program. Read all lines of the input (detect\nEOF, or make the first line contain number of lines that follow, whichever is more convenient\nfor you). Afterwards, print LED states as they are whenever the program performs an out instruction.&lt;/p&gt;\n\n&lt;p&gt;Each line is in the following format:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;line&amp;gt;: &amp;lt;whitespace&amp;gt; &amp;lt;instruction&amp;gt; |\n        &amp;lt;empty&amp;gt;\n\n&amp;lt;instruction&amp;gt; : ld a,&amp;lt;num&amp;gt; |\n                out (0),a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;lt;whitespace&amp;gt; is one or more of characters &amp;quot; &amp;quot; or &amp;quot;\\t&amp;quot;. &amp;lt;num&amp;gt; is a number between 0 and 255.&lt;/p&gt;\n\n&lt;p&gt;Instruction ld a,&amp;lt;num&amp;gt; sets internal 8-bit register A to the given number.\nInstruction out (0),a updates the LEDs according to the current number in A.\nThe LED-0&amp;#39;s state corresponds to bit 0 of number in A, when that number is represented\nin binary. For example, when A = 5, the LED state after out instruction is &amp;quot;.....*.*&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;You should output the LED states after each out instruction.&lt;/p&gt;\n\n&lt;p&gt;Challenge input 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  ld a,14\n  out (0),a\n  ld a,12\n  out (0),a\n  ld a,8\n  out (0),a\n\n  out (0),a\n  ld a,12\n  out (0),a\n  ld a,14\n  out (0),a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Expected output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;....***.\n....**..\n....*...\n....*...\n....**..\n....***.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;2nd Part&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;We will extend our programming language, so that we can do more updates without\nwriting out instruction for each of them. We will have loops.&lt;/p&gt;\n\n&lt;p&gt;Each line has the following format:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;line&amp;gt;: &amp;lt;whitespace&amp;gt; &amp;lt;instruction&amp;gt; |\n        &amp;lt;label&amp;gt;                    |\n        &amp;lt;empty&amp;gt;\n\n&amp;lt;instruction&amp;gt; : ld a,&amp;lt;num&amp;gt; |\n                ld b,&amp;lt;num&amp;gt; |\n                out (0),a  |\n                rlca       |\n                rrca       |\n                djnz &amp;lt;labelref&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;lt;label&amp;gt; is a sequence of characters a-z A-Z _ terminated with one character &amp;quot;:&amp;quot;.\n&amp;lt;labelref&amp;gt; is a sequence of characters a-z A-Z _ (it corresponds to some label minus\nthe trailing &amp;quot;:&amp;quot;).&lt;/p&gt;\n\n&lt;p&gt;Instruction ld b,&amp;lt;num&amp;gt; sets a number to register B. Instruction rlca rotates bits in\nregister A one position to the left, in circle (i.e. bit 0 goes to bit 1, bit 1 to bit 2,\nand bit 7 to bit 0). Instruction rrca rotates bits in register A one position to the\nright, in circle.\nInstruction djnz &amp;lt;labelref&amp;gt; (decrement and jump if not zero)\nsubtracts one from the value of register B and if the new value of register B is not\nzero then the processing of instructions continues at the line containg label\ncorresponding to the &amp;lt;labelref&amp;gt;. You can assume that in the input text &amp;lt;label&amp;gt; is always\ngiven before the corresponding &amp;lt;labelref&amp;gt; (i.e. jumps go backwards).&lt;/p&gt;\n\n&lt;p&gt;You should output the LED states after each out instruction.&lt;/p&gt;\n\n&lt;p&gt;Challenge Input 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  ld b,3\n\ntriple:\n  ld a,126\n  out (0),a\n  ld a,60\n  out (0),a\n  ld a,24\n  out (0),a\n  djnz triple\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Challenge Output 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;.******.\n..****..\n...**...\n.******.\n..****..\n...**...\n.******.\n..****..\n...**...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Challenge Input 3:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  ld a,1\n  ld b,9\n\nloop:\n  out (0),a\n  rlca\n  djnz loop\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Challenge Output 3:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;.......*\n......*.\n.....*..\n....*...\n...*....\n..*.....\n.*......\n*.......\n.......*\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Challenge Input 4:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  ld a,2\n  ld b,9\n\nloop:\n  out (0),a\n  rrca\n  djnz loop\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Challenge Output 4:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;......*.\n.......*\n*.......\n.*......\n..*.....\n...*....\n....*...\n.....*..\n......*.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was suggested by &lt;a href=\"/u/lukz\"&gt;/u/lukz&lt;/a&gt; in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;, many thanks! If you have a challenge idea please share it and there&amp;#39;s a good chance we&amp;#39;ll use it. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nMark saw someone doing experiments with blinking LEDs (imagine something like [this](http://www.batsocks.co.uk/readme/XMegaExamples.htm#Sweep) ) and became fascinated by it.\nHe wants to know more about it. He knows you are good with computers, so he comes to\nyou asking if you can teach him how it works. You agree, but as you don't have any\nLEDs with you at the moment, you suggest: \"Let's build an emulator with which we can\nsee what's happening inside\". And that's today's challenge.\n\n**1st Part**\n\nThe 1st part should be easy, even though the description is rather verbose. If you want\nmore challenge try the 2nd part afterwards.\n\nOur system has 8 LEDs, we represent their state with a text output. When\nall LEDs are off, it is printed as string of eight dots \"........\". When a led is on,\nit is printed as \"\\*\". LED-0 is on the right side (least significant bit), LED-7 is on the\nleft side. Having LEDs 0 and 1 on and all others off is written as \"......\\**\"\n\nOn input you get a sequence of lines forming a program. Read all lines of the input (detect\nEOF, or make the first line contain number of lines that follow, whichever is more convenient\nfor you). Afterwards, print LED states as they are whenever the program performs an out instruction.\n\nEach line is in the following format:\n\n    &lt;line&gt;: &lt;whitespace&gt; &lt;instruction&gt; |\n            &lt;empty&gt;\n\n    &lt;instruction&gt; : ld a,&lt;num&gt; |\n                    out (0),a\n\n&amp;lt;whitespace&amp;gt; is one or more of characters \" \" or \"\\t\". &amp;lt;num&amp;gt; is a number between 0 and 255.\n\nInstruction ld a,&amp;lt;num&amp;gt; sets internal 8-bit register A to the given number.\nInstruction out (0),a updates the LEDs according to the current number in A.\nThe LED-0's state corresponds to bit 0 of number in A, when that number is represented\nin binary. For example, when A = 5, the LED state after out instruction is \".....\\*.*\".\n\nYou should output the LED states after each out instruction.\n\nChallenge input 1:\n\n      ld a,14\n      out (0),a\n      ld a,12\n      out (0),a\n      ld a,8\n      out (0),a\n\n      out (0),a\n      ld a,12\n      out (0),a\n      ld a,14\n      out (0),a\n\nExpected output:\n\n    ....***.\n    ....**..\n    ....*...\n    ....*...\n    ....**..\n    ....***.\n\n\n**2nd Part**\n\nWe will extend our programming language, so that we can do more updates without\nwriting out instruction for each of them. We will have loops.\n\nEach line has the following format:\n\n    &lt;line&gt;: &lt;whitespace&gt; &lt;instruction&gt; |\n            &lt;label&gt;                    |\n            &lt;empty&gt;\n\n    &lt;instruction&gt; : ld a,&lt;num&gt; |\n                    ld b,&lt;num&gt; |\n                    out (0),a  |\n                    rlca       |\n                    rrca       |\n                    djnz &lt;labelref&gt;\n\n&amp;lt;label&amp;gt; is a sequence of characters a-z A-Z _ terminated with one character \":\".\n&amp;lt;labelref&amp;gt; is a sequence of characters a-z A-Z _ (it corresponds to some label minus\nthe trailing \":\").\n\nInstruction ld b,&amp;lt;num&amp;gt; sets a number to register B. Instruction rlca rotates bits in\nregister A one position to the left, in circle (i.e. bit 0 goes to bit 1, bit 1 to bit 2,\nand bit 7 to bit 0). Instruction rrca rotates bits in register A one position to the\nright, in circle.\nInstruction djnz &amp;lt;labelref&amp;gt; (decrement and jump if not zero)\nsubtracts one from the value of register B and if the new value of register B is not\nzero then the processing of instructions continues at the line containg label\ncorresponding to the &amp;lt;labelref&amp;gt;. You can assume that in the input text &amp;lt;label&amp;gt; is always\ngiven before the corresponding &amp;lt;labelref&amp;gt; (i.e. jumps go backwards).\n\nYou should output the LED states after each out instruction.\n\nChallenge Input 2:\n\n      ld b,3\n\n    triple:\n      ld a,126\n      out (0),a\n      ld a,60\n      out (0),a\n      ld a,24\n      out (0),a\n      djnz triple\n\nChallenge Output 2:\n\n    .******.\n    ..****..\n    ...**...\n    .******.\n    ..****..\n    ...**...\n    .******.\n    ..****..\n    ...**...\n\n\nChallenge Input 3:\n\n      ld a,1\n      ld b,9\n\n    loop:\n      out (0),a\n      rlca\n      djnz loop\n\nChallenge Output 3:\n\n    .......*\n    ......*.\n    .....*..\n    ....*...\n    ...*....\n    ..*.....\n    .*......\n    *.......\n    .......*\n\nChallenge Input 4:\n\n      ld a,2\n      ld b,9\n\n    loop:\n      out (0),a\n      rrca\n      djnz loop\n\nChallenge Output 4:\n\n    ......*.\n    .......*\n    *.......\n    .*......\n    ..*.....\n    ...*....\n    ....*...\n    .....*..\n    ......*.\n\n# Credit\n\nThis challenge was suggested by /u/lukz in /r/dailyprogrammer_ideas, many thanks! If you have a challenge idea please share it and there's a good chance we'll use it. ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "5as91q", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_5as91q", "score": 68, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1478118299.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/5as91q/20161102_challenge_290_intermediate_blinking_leds/", "locked": false, "stickied": false, "created": 1478146434.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/5as91q/20161102_challenge_290_intermediate_blinking_leds/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-11-02] Challenge #290 [Intermediate] Blinking LEDs", "created_utc": 1478117634.0, "link_flair_text": null, "distinguished": null, "num_comments": 52, "visited": false, "num_reports": null, "ups": 68}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;In mathematics, a &lt;a href=\"https://en.wikipedia.org/wiki/Kaprekar_number\"&gt;Kaprekar number&lt;/a&gt; for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again. For instance, 45 is a Kaprekar number, because 45&lt;sup&gt;2&lt;/sup&gt; = 2025 and 20+25 = 45. The Kaprekar numbers are named after D. R. Kaprekar. &lt;/p&gt;\n\n&lt;p&gt;I was introduced to this after the recent &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/56tbds/20161010_challenge_287_easy_kaprekars_routine/\"&gt;Kaprekar constant challenge&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;For the main challenge we&amp;#39;ll only focus on base 10 numbers. For a bonus, see if you can make it work in arbitrary bases.&lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;Your program will receive two integers per line telling you the start and end of the range to scan, inclusively. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 50\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit the Kaprekar numbers in that range. From our example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;45\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;2 100\n101 9000\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;p&gt;&lt;em&gt;Updated the output as per &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/5aemnn/20161031_challenge_290_easy_kaprekar_numbers/d9fx1hf/\"&gt;this comment&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;9 45 55 99\n297 703 999 2223 2728 4879 5050 5292 7272 7777\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nIn mathematics, a [Kaprekar number](https://en.wikipedia.org/wiki/Kaprekar_number) for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again. For instance, 45 is a Kaprekar number, because 45^2 = 2025 and 20+25 = 45. The Kaprekar numbers are named after D. R. Kaprekar. \n\nI was introduced to this after the recent [Kaprekar constant challenge](https://www.reddit.com/r/dailyprogrammer/comments/56tbds/20161010_challenge_287_easy_kaprekars_routine/). \n\nFor the main challenge we'll only focus on base 10 numbers. For a bonus, see if you can make it work in arbitrary bases.\n\n# Input Description\n\nYour program will receive two integers per line telling you the start and end of the range to scan, inclusively. Example:\n\n\t1 50\n\n# Output Description\n\nYour program should emit the Kaprekar numbers in that range. From our example:\n\n\t45\n\n# Challenge Input\n\n\t2 100\n\t101 9000\n\n# Challenge Output\n\n*Updated the output as per [this comment](https://www.reddit.com/r/dailyprogrammer/comments/5aemnn/20161031_challenge_290_easy_kaprekar_numbers/d9fx1hf/)*\n\n\t9 45 55 99\n\t297 703 999 2223 2728 4879 5050 5292 7272 7777", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "5aemnn", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_5aemnn", "score": 64, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1477957528.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/5aemnn/20161031_challenge_290_easy_kaprekar_numbers/", "locked": false, "stickied": false, "created": 1477973260.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/5aemnn/20161031_challenge_290_easy_kaprekar_numbers/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-10-31] Challenge #290 [Easy] Kaprekar Numbers", "created_utc": 1477944460.0, "link_flair_text": null, "distinguished": null, "num_comments": 128, "visited": false, "num_reports": null, "ups": 64}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Do you know the game &lt;a href=\"https://boardgamegeek.com/boardgame/63268/spot-it\"&gt;&amp;quot;Spot it!&amp;quot; (aka Dobble in Europe)&lt;/a&gt; ? This is a very entertaining game of visual perception and speed. The goal of the game is to be the first player to find the matching symbol between 2 cards drawn from the pile.&lt;/p&gt;\n\n&lt;p&gt;Your challenge today is to build a valid set of &amp;quot;Spot it!&amp;quot; cards of a given order. The standard set has 55 cards with 8 symbols on each card, and every pair of cards has exactly one symbol in common. It is a concrete and funny example of a beautiful mathematical structure called a finite projective plane of order 7.&lt;/p&gt;\n\n&lt;p&gt;A finite projective projective plane of order N has the following properties:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;It consists of N^2 + N + 1 points and N^2 + N + 1 lines.\nEach point has N+1 line incidents.\nEach line has N+1 point incidents.\nGiven any two points, there is exactly one line incident with both of them.\nGiven any two lines, there is exactly one point incident with both of them.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What if you replace &amp;quot;point&amp;quot; with &amp;quot;card&amp;quot; and &amp;quot;line&amp;quot; with &amp;quot;symbol&amp;quot; ? You get the rules to generate a valid set of cards !&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;It consists of N^2 + N + 1 cards and N^2 + N + 1 symbols.\nEach card has N+1 symbols displayed on it.\nEach symbol is displayed on N+1 cards.\nGiven any two cards, there is exactly one symbol in common between them.\nGiven any two symbols, there is exactly one card that displays both of them.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may have noticed that there are 2 cards missing in the standard set to make it fulfill the rules 1 and 3 above - there should be a total of 57 cards in it. But the fun is still the same, even if you lose cards you are still able to play because of rules 4 and 5 !&lt;/p&gt;\n\n&lt;p&gt;The challenge difficulty will strongly depend on the value of N:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;[Intermediate] when N is prime&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;[Hard] when N is a power of prime (N = X&lt;sup&gt;P&lt;/sup&gt; with X prime and P &amp;gt; 0)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Nobody ever succeeded in generating a finite projective plane for N not being a power of prime, but you may go for it and win the Fields medal ! It has been conjectured impossible for N = 6 by &lt;a href=\"https://en.wikipedia.org/wiki/Thirty-six_officers_problem\"&gt;Euler&lt;/a&gt;, and more recently proven for N = 10 by... &lt;a href=\"https://www.maa.org/sites/default/files/pdf/upload_library/22/Ford/Lam305-318.pdf\"&gt;brute force&lt;/a&gt; ! N = 12 is still an open case.&lt;/p&gt;\n\n&lt;p&gt;Be aware that even for relatively small orders, brute force programs will take a long time to find a valid solution. A non-brute force algorithm exists and may be used instead.&lt;/p&gt;\n\n&lt;p&gt;Your program should be able to handle N &amp;lt;= 101.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Input description&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You will be given a card set order N &amp;gt; 1.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Output description&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;N&lt;sup&gt;2&lt;/sup&gt; + N + 1 lines of N+1 digits (one line per card, the digits identifying the symbol number)&lt;/p&gt;\n\n&lt;p&gt;Example for N=2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 2 5\n3 4 5\n1 4 6\n3 2 6\n1 3 7\n2 4 7\n5 6 7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Bonus 1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Check the validity of your output against the five rules listed above.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Bonus 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Replace numbered symbols by a list of words of your choice, or even pictures !&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Have a good challenge idea?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "**Description**\n\nDo you know the game [\"Spot it!\" (aka Dobble in Europe)](https://boardgamegeek.com/boardgame/63268/spot-it) ? This is a very entertaining game of visual perception and speed. The goal of the game is to be the first player to find the matching symbol between 2 cards drawn from the pile.\n\nYour challenge today is to build a valid set of \"Spot it!\" cards of a given order. The standard set has 55 cards with 8 symbols on each card, and every pair of cards has exactly one symbol in common. It is a concrete and funny example of a beautiful mathematical structure called a finite projective plane of order 7.\n\nA finite projective projective plane of order N has the following properties:\n\n    It consists of N^2 + N + 1 points and N^2 + N + 1 lines.\n    Each point has N+1 line incidents.\n    Each line has N+1 point incidents.\n    Given any two points, there is exactly one line incident with both of them.\n    Given any two lines, there is exactly one point incident with both of them.\n\nWhat if you replace \"point\" with \"card\" and \"line\" with \"symbol\" ? You get the rules to generate a valid set of cards !\n\n    It consists of N^2 + N + 1 cards and N^2 + N + 1 symbols.\n    Each card has N+1 symbols displayed on it.\n    Each symbol is displayed on N+1 cards.\n    Given any two cards, there is exactly one symbol in common between them.\n    Given any two symbols, there is exactly one card that displays both of them.\n\nYou may have noticed that there are 2 cards missing in the standard set to make it fulfill the rules 1 and 3 above - there should be a total of 57 cards in it. But the fun is still the same, even if you lose cards you are still able to play because of rules 4 and 5 !\n\nThe challenge difficulty will strongly depend on the value of N:\n\n- [Intermediate] when N is prime\n\n- [Hard] when N is a power of prime (N = X^P with X prime and P &amp;gt; 0)\n\nNobody ever succeeded in generating a finite projective plane for N not being a power of prime, but you may go for it and win the Fields medal ! It has been conjectured impossible for N = 6 by [Euler](https://en.wikipedia.org/wiki/Thirty-six_officers_problem), and more recently proven for N = 10 by... [brute force](https://www.maa.org/sites/default/files/pdf/upload_library/22/Ford/Lam305-318.pdf) ! N = 12 is still an open case.\n\nBe aware that even for relatively small orders, brute force programs will take a long time to find a valid solution. A non-brute force algorithm exists and may be used instead.\n\nYour program should be able to handle N &amp;lt;= 101.\n\n\n**Input description**\n\nYou will be given a card set order N &amp;gt; 1.\n\n\n**Output description**\n\nN^2 + N + 1 lines of N+1 digits (one line per card, the digits identifying the symbol number)\n\nExample for N=2\n\n    1 2 5\n    3 4 5\n    1 4 6\n    3 2 6\n    1 3 7\n    2 4 7\n    5 6 7\n\n\n**Bonus 1**\n\nCheck the validity of your output against the five rules listed above.\n\n\n**Bonus 2**\n\nReplace numbered symbols by a list of words of your choice, or even pictures !\n\n\n**Have a good challenge idea?**\n\nConsider submitting it to /r/dailyprogrammer_ideas\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "59vml0", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_59vml0", "score": 55, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/59vml0/20161028_challenge_289_hard_spot_it_cards/", "locked": false, "stickied": false, "created": 1477703660.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/59vml0/20161028_challenge_289_hard_spot_it_cards/", "author_flair_text": "0 0", "quarantine": false, "title": "[2016-10-28] Challenge #289 [Hard] \"Spot it!\" cards generator", "created_utc": 1477674860.0, "link_flair_text": null, "distinguished": null, "num_comments": 9, "visited": false, "num_reports": null, "ups": 55}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;The prupose of this challenge is to help user to find the quickest way to go from a metro station to another.\nThe metro map is the following: &lt;a href=\"http://imgur.com/9K060Fr\"&gt;http://imgur.com/9K060Fr&lt;/a&gt; (blacks numbers are the time between stations)&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Metro map input description&lt;/h2&gt;\n\n&lt;p&gt;As an input you will use the following table wich provide connexions between stations and the time associated.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Z, VIOLET, N, VIOLET, 6\nA, BLUE, N, BLUE, 5\nN, BLUE, M, BLUE, 5\nA, GREEN, B, GREEN, 2\nB, GREEN, C, GREEN, 2\nC, GREEN, D, GREEN, 1\nD, GREEN, E, GREEN, 1\nE, GREEN, F, GREEN, 2\nF, GREEN, G, GREEN, 2\nG, GREEN, J, GREEN, 3\nJ, GREEN, M, GREEN, 3\nA, YELLOW, D, YELLOW, 3\nD, YELLOW, G, YELLOW, 3\nG, YELLOW, H, YELLOW, 2\nH, YELLOW, I, YELLOW, 2\nI, YELLOW, J, YELLOW, 1\nJ, YELLOW, K, YELLOW, 2\nK, YELLOW, L, YELLOW, 2\nL, YELLOW, M, YELLOW, 1\nA, YELLOW, A, GREEN, 2\nA, GREEN, A, BLUE, 3\nA, YELLOW, A, BLUE, 2.5\nD, YELLOW, D, GREEN, 1.5\nG, YELLOW, G, GREEN, 1.5\nJ, YELLOW, J, GREEN, 1.5\nM, YELLOW, M, GREEN, 1.5\nM, GREEN, M, BLUE, 2\nM, YELLOW, M, BLUE, 1\nN, VIOLET, N, BLUE, 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Lines with the pattern &lt;strong&gt;X, COLOR1, Y, COLOR1, Z&lt;/strong&gt; mean that with the COLOR1 metro line you can go from station X to station Y in Z minutes.\nLines with the pattern &lt;strong&gt;X, COLOR1, X, COLOR2, Z&lt;/strong&gt; mean than to change from line COLOR1 to line COLOR2 in station X, it takes Z minutes.&lt;/p&gt;\n\n&lt;h2&gt;Challenge Input description&lt;/h2&gt;\n\n&lt;p&gt;You will given 2 stops. The first is where the user is at. The second is where the users wants to go.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;A\nB\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;All options given that you can only have 1 change of line.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Option 0 : At A, take GREEN line exit at B\nOption 1 : At A, take YELLOW line, change at D and take GREEN line exit at B\nOption 2  : At A, take YELLOW line, change at G and take GREEN line exit at B\nOption 3  : At A, take YELLOW line, change at J and take GREEN line exit at B\nOption 4  : At A, take BLUE line, change at M and take GREEN line exit at B\nOption 5  : At A, take YELLOW line, change at M and take GREEN line exit at B\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Challenges&lt;/h2&gt;\n\n&lt;h3&gt;Input 1&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;M\nZ\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output 1&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;Option 0 : At M, take BLUE line, change at N and take VIOLET line exit at Z\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;input 2&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;Z\nB\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output 2&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;No options found to go from Z to B with maximum one change\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Add direction and duration to the discription&lt;/p&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;A\nZ\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Option 0 (2mn) : At A, take GREEN line in direction of M exit at B\nOption 1 (7.5mn) : At A, take YELLOW line in direction of M, change at D and take GREEN in direction of A line exit at B\nOption 2 (15.5mn) : At A, take YELLOW line in direction of M, change at G and take GREEN in direction of A line exit at B\nOption 3 (23.5mn) : At A, take YELLOW line in direction of M, change at J and take GREEN in direction of A line exit at B\nOption 4 (26.0mn) : At A, take BLUE line in direction of M, change at M and take GREEN line in direction of A exit at B\nOption 5 (31.5mn) : At A, take YELLOW line in direction of M, change at M and take GREEN line in direction of A exit at B\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea like &lt;a href=\"/u/urbainvi\"&gt;/u/urbainvi&lt;/a&gt; did?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nThe prupose of this challenge is to help user to find the quickest way to go from a metro station to another.\nThe metro map is the following: http://imgur.com/9K060Fr (blacks numbers are the time between stations)\n\n#Formal Inputs &amp; Outputs\n\n## Metro map input description\n\nAs an input you will use the following table wich provide connexions between stations and the time associated.\n\n    Z, VIOLET, N, VIOLET, 6\n    A, BLUE, N, BLUE, 5\n    N, BLUE, M, BLUE, 5\n    A, GREEN, B, GREEN, 2\n    B, GREEN, C, GREEN, 2\n    C, GREEN, D, GREEN, 1\n    D, GREEN, E, GREEN, 1\n    E, GREEN, F, GREEN, 2\n    F, GREEN, G, GREEN, 2\n    G, GREEN, J, GREEN, 3\n    J, GREEN, M, GREEN, 3\n    A, YELLOW, D, YELLOW, 3\n    D, YELLOW, G, YELLOW, 3\n    G, YELLOW, H, YELLOW, 2\n    H, YELLOW, I, YELLOW, 2\n    I, YELLOW, J, YELLOW, 1\n    J, YELLOW, K, YELLOW, 2\n    K, YELLOW, L, YELLOW, 2\n    L, YELLOW, M, YELLOW, 1\n    A, YELLOW, A, GREEN, 2\n    A, GREEN, A, BLUE, 3\n    A, YELLOW, A, BLUE, 2.5\n    D, YELLOW, D, GREEN, 1.5\n    G, YELLOW, G, GREEN, 1.5\n    J, YELLOW, J, GREEN, 1.5\n    M, YELLOW, M, GREEN, 1.5\n    M, GREEN, M, BLUE, 2\n    M, YELLOW, M, BLUE, 1\n    N, VIOLET, N, BLUE, 2\n\n\nLines with the pattern **X, COLOR1, Y, COLOR1, Z** mean that with the COLOR1 metro line you can go from station X to station Y in Z minutes.\nLines with the pattern **X, COLOR1, X, COLOR2, Z** mean than to change from line COLOR1 to line COLOR2 in station X, it takes Z minutes.\n\n## Challenge Input description\n\nYou will given 2 stops. The first is where the user is at. The second is where the users wants to go.\n\n    A\n    B\n\n## Output description\n\nAll options given that you can only have 1 change of line.\n\n    Option 0 : At A, take GREEN line exit at B\n    Option 1 : At A, take YELLOW line, change at D and take GREEN line exit at B\n    Option 2  : At A, take YELLOW line, change at G and take GREEN line exit at B\n    Option 3  : At A, take YELLOW line, change at J and take GREEN line exit at B\n    Option 4  : At A, take BLUE line, change at M and take GREEN line exit at B\n    Option 5  : At A, take YELLOW line, change at M and take GREEN line exit at B\n    ...\n\n## Challenges \n\n### Input 1\n\n    M\n    Z\n\n### Output 1\n\n    Option 0 : At M, take BLUE line, change at N and take VIOLET line exit at Z\n\n\n### input 2\n\n    Z\n    B\n\n### Output 2\n\n    No options found to go from Z to B with maximum one change\n\n#Bonus\n\nAdd direction and duration to the discription\n\n## Input \n\n    A\n    Z\n\n## Output\n\n    Option 0 (2mn) : At A, take GREEN line in direction of M exit at B\n    Option 1 (7.5mn) : At A, take YELLOW line in direction of M, change at D and take GREEN in direction of A line exit at B\n    Option 2 (15.5mn) : At A, take YELLOW line in direction of M, change at G and take GREEN in direction of A line exit at B\n    Option 3 (23.5mn) : At A, take YELLOW line in direction of M, change at J and take GREEN in direction of A line exit at B\n    Option 4 (26.0mn) : At A, take BLUE line in direction of M, change at M and take GREEN line in direction of A exit at B\n    Option 5 (31.5mn) : At A, take YELLOW line in direction of M, change at M and take GREEN line in direction of A exit at B\n    ...\n\n#Finally\n\nHave a good challenge idea like /u/urbainvi did?\n\nConsider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "59mnxa", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_59mnxa", "score": 89, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/59mnxa/20161027_challenge_289_intermediate_metro_trip/", "locked": false, "stickied": false, "created": 1477580125.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/59mnxa/20161027_challenge_289_intermediate_metro_trip/", "author_flair_text": "0 0", "quarantine": false, "title": "[2016-10-27] Challenge #289 [Intermediate] Metro trip planner", "created_utc": 1477551325.0, "link_flair_text": null, "distinguished": null, "num_comments": 22, "visited": false, "num_reports": null, "ups": 89}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;In the popular Pok\u00e9mon games all moves and Pok\u00e9mons have types that determine how effective certain moves are against certain Pok\u00e9mons.&lt;/p&gt;\n\n&lt;p&gt;These work by some very simple rules, a certain type can be super effective, normal, not very effective or have no effect at all against another type. These translate respectively to 2x, 1x, 0.5x and 0x damage multiplication. If a Pok\u00e9mon has multiple types the effectiveness of a move against this Pok\u00e9mon will be the product of the effectiveness of the move to it&amp;#39;s types.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;p&gt;The program should take the type of a move being used and the types of the Pok\u00e9mon it is being used on.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example inputs&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; fire -&amp;gt; grass\n fighting -&amp;gt; ice rock\n psychic -&amp;gt; poison dark\n water -&amp;gt; normal\n fire -&amp;gt; rock\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;p&gt;The program should output the damage multiplier these types lead to.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example outputs&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;2x\n4x\n0x\n1x\n0.5x\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;Since probably not every dailyprogrammer user is an avid Pok\u00e9mon player that knows the type effectiveness multipliers by heart here is a &lt;a href=\"http://pokemondb.net/type\"&gt;Pok\u00e9mon type chart&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Bonus 1&lt;/h1&gt;\n\n&lt;p&gt;Use the &lt;a href=\"https://pokeapi.co\"&gt;Pok\u00e9mon api&lt;/a&gt; to calculate the output damage.&lt;/p&gt;\n\n&lt;p&gt;Like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;http://pokeapi.co/api/v2/type/fire/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;returns (skipped the long list)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{  \n    &amp;quot;name&amp;quot;:&amp;quot;fire&amp;quot;,\n    &amp;quot;generation&amp;quot;:{  \n        &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/generation\\/1\\/&amp;quot;,\n        &amp;quot;name&amp;quot;:&amp;quot;generation-i&amp;quot;\n    },\n    &amp;quot;damage_relations&amp;quot;:{  \n        &amp;quot;half_damage_from&amp;quot;:[  \n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/7\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;bug&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/9\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;steel&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/10\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;fire&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/12\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;grass&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/15\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;ice&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/18\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;fairy&amp;quot;\n            }\n        ],\n        &amp;quot;no_damage_from&amp;quot;:[  \n\n        ],\n        &amp;quot;half_damage_to&amp;quot;:[  \n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/6\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;rock&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/10\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;fire&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/11\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;water&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/16\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;dragon&amp;quot;\n            }\n        ],\n        &amp;quot;double_damage_from&amp;quot;:[  \n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/5\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;ground&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/6\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;rock&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/11\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;water&amp;quot;\n            }\n        ],\n        &amp;quot;no_damage_to&amp;quot;:[  \n\n        ],\n        &amp;quot;double_damage_to&amp;quot;:[  \n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/7\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;bug&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/9\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;steel&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/12\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;grass&amp;quot;\n            },\n            {  \n                &amp;quot;url&amp;quot;:&amp;quot;http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/15\\/&amp;quot;,\n                &amp;quot;name&amp;quot;:&amp;quot;ice&amp;quot;\n            }\n        ]\n    },\n    &amp;quot;game_indices&amp;quot;:[  \n       ...\n    ],\n    &amp;quot;move_damage_class&amp;quot;:{  \n        ...\n    },\n    &amp;quot;moves&amp;quot;:[  \n        ...\n    ],\n    &amp;quot;pokemon&amp;quot;:[  \n        ...\n    ],\n    &amp;quot;id&amp;quot;:10,\n    &amp;quot;names&amp;quot;:[  \n        ...\n    ]\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you parse this json, you can calculate the output, instead of hard coding it.&lt;/p&gt;\n\n&lt;h1&gt;Bonus 2&lt;/h1&gt;\n\n&lt;p&gt;Deep further into the api and give the multiplier for folowing &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fire punch -&amp;gt; bulbasaur\nwrap -&amp;gt; onix\nsurf -&amp;gt; dwegong\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;side note&lt;/h2&gt;\n\n&lt;p&gt;the api replaces a space with a hypen (&lt;code&gt;-&lt;/code&gt;)&lt;/p&gt;\n\n&lt;h1&gt;Finaly&lt;/h1&gt;\n\n&lt;p&gt;Special thanks to &lt;a href=\"/u/Daanvdk\"&gt;/u/Daanvdk&lt;/a&gt; for posting the idea on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you also have a good idea, don&amp;#39;t be afraid to put it over their.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: Fixed link&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\nIn the popular Pok\u00e9mon games all moves and Pok\u00e9mons have types that determine how effective certain moves are against certain Pok\u00e9mons.\n\nThese work by some very simple rules, a certain type can be super effective, normal, not very effective or have no effect at all against another type. These translate respectively to 2x, 1x, 0.5x and 0x damage multiplication. If a Pok\u00e9mon has multiple types the effectiveness of a move against this Pok\u00e9mon will be the product of the effectiveness of the move to it's types.\n\n# Formal Inputs &amp;amp; Outputs\n## Input\nThe program should take the type of a move being used and the types of the Pok\u00e9mon it is being used on.\n\n**Example inputs**\n\n     fire -&gt; grass\n     fighting -&gt; ice rock\n     psychic -&gt; poison dark\n     water -&gt; normal\n     fire -&gt; rock\n\n## Output\nThe program should output the damage multiplier these types lead to.\n\n**Example outputs**\n\n    2x\n    4x\n    0x\n    1x\n    0.5x\n\n# Notes/Hints\nSince probably not every dailyprogrammer user is an avid Pok\u00e9mon player that knows the type effectiveness multipliers by heart here is a [Pok\u00e9mon type chart](http://pokemondb.net/type).\n\n# Bonus 1\n\nUse the [Pok\u00e9mon api](https://pokeapi.co) to calculate the output damage.\n\nLike\n\n    http://pokeapi.co/api/v2/type/fire/\n\n\nreturns (skipped the long list)\n\n    {  \n        \"name\":\"fire\",\n        \"generation\":{  \n            \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/generation\\/1\\/\",\n            \"name\":\"generation-i\"\n        },\n        \"damage_relations\":{  \n            \"half_damage_from\":[  \n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/7\\/\",\n                    \"name\":\"bug\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/9\\/\",\n                    \"name\":\"steel\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/10\\/\",\n                    \"name\":\"fire\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/12\\/\",\n                    \"name\":\"grass\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/15\\/\",\n                    \"name\":\"ice\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/18\\/\",\n                    \"name\":\"fairy\"\n                }\n            ],\n            \"no_damage_from\":[  \n\n            ],\n            \"half_damage_to\":[  \n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/6\\/\",\n                    \"name\":\"rock\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/10\\/\",\n                    \"name\":\"fire\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/11\\/\",\n                    \"name\":\"water\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/16\\/\",\n                    \"name\":\"dragon\"\n                }\n            ],\n            \"double_damage_from\":[  \n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/5\\/\",\n                    \"name\":\"ground\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/6\\/\",\n                    \"name\":\"rock\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/11\\/\",\n                    \"name\":\"water\"\n                }\n            ],\n            \"no_damage_to\":[  \n\n            ],\n            \"double_damage_to\":[  \n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/7\\/\",\n                    \"name\":\"bug\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/9\\/\",\n                    \"name\":\"steel\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/12\\/\",\n                    \"name\":\"grass\"\n                },\n                {  \n                    \"url\":\"http:\\/\\/pokeapi.co\\/api\\/v2\\/type\\/15\\/\",\n                    \"name\":\"ice\"\n                }\n            ]\n        },\n        \"game_indices\":[  \n           ...\n        ],\n        \"move_damage_class\":{  \n            ...\n        },\n        \"moves\":[  \n            ...\n        ],\n        \"pokemon\":[  \n            ...\n        ],\n        \"id\":10,\n        \"names\":[  \n            ...\n        ]\n        }\n\nIf you parse this json, you can calculate the output, instead of hard coding it.\n\n# Bonus 2\n\nDeep further into the api and give the multiplier for folowing \n\n\n    fire punch -&gt; bulbasaur\n    wrap -&gt; onix\n    surf -&gt; dwegong\n\n\n##side note \n\nthe api replaces a space with a hypen (`-`)\n\n\n#Finaly\n\nSpecial thanks to /u/Daanvdk for posting the idea on /r/dailyprogrammer_ideas.\n\nIf you also have a good idea, don't be afraid to put it over their.\n\n**EDIT**: Fixed link", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "5961a5", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_5961a5", "score": 106, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1477336210.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/5961a5/20161024_challenge_289_easy_its_super_effective/", "locked": false, "stickied": false, "created": 1477361157.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/5961a5/20161024_challenge_289_easy_its_super_effective/", "author_flair_text": "0 0", "quarantine": false, "title": "[2016-10-24] Challenge #289 [Easy] It's super effective!", "created_utc": 1477332357.0, "link_flair_text": null, "distinguished": null, "num_comments": 96, "visited": false, "num_reports": null, "ups": 106}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You start with an empty grid of size m-by-m. Your goal is to fill it with numbers 1 through 9, so that the total sum of all numbers in the grid is the greatest.&lt;/p&gt;\n\n&lt;h2&gt;Rules&lt;/h2&gt;\n\n&lt;p&gt;The grid fill rules are as follows:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;All cells must be filled with a number between 1 and 9.&lt;/li&gt;\n&lt;li&gt;You can fill any cell in the grid with &amp;quot;1&amp;quot;.&lt;/li&gt;\n&lt;li&gt;You can fill any cell in the grid with &amp;quot;2&amp;quot;, provided that cell is adjacent to a cell containing &amp;quot;1&amp;quot;.&lt;/li&gt;\n&lt;li&gt;You can fill any cell in the grid with &amp;quot;3&amp;quot;, provided that cell is both adjacent to a cell containing &amp;quot;2&amp;quot;, and adjacent to another cell containing &amp;quot;1&amp;quot;.&lt;/li&gt;\n&lt;li&gt;&amp;lt;snip&amp;gt;&lt;/li&gt;\n&lt;li&gt;You can fill any cell in the grid with &amp;quot;9&amp;quot;, provided it is adjacent to cells containing 8, 7, 6, 5, 4, 3, 2, and 1.&lt;/li&gt;\n&lt;li&gt;&amp;quot;Adjacent&amp;quot; includes diagonals (i.e. in a move&amp;#39;s reach of a chess King).&lt;/li&gt;\n&lt;li&gt;There are no limits on how many times you can use each number (except to comply with the above rules), and you are not obliged to use any number.&lt;/li&gt;\n&lt;li&gt;In case multiple optimal solutions (solutions with equally maximum total sums) are possible for a grid of a given size, producing any one is sufficient.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;p&gt;The input consists of a positive integer representing size &amp;quot;m&amp;quot; of an m-by-m grid, e.g.:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;grid(3)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;p&gt;The output consists of characters which represent a filled grid as per above rules, with an optimal solution (maximum total sum). The output format is a string of integers representing each row, with rows separated by line breaks (same format as the example solutions given below).&lt;/p&gt;\n\n&lt;p&gt;Below are example outputs for input:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;grid(3)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Illegal solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;111\n222\n333\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because the bottom &amp;quot;3&amp;quot;s must each be adjacent to both a &amp;quot;2&amp;quot; and a &amp;quot;1&amp;quot;, yet they are only adjacent to a &amp;quot;2&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Legal but suboptimal solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;123\n321\n123\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In above example, each &amp;quot;3&amp;quot; is adjacent to a &amp;quot;2&amp;quot; and a &amp;quot;1&amp;quot;, and each &amp;quot;2&amp;quot; is adjacent to a 1. However, the sum of the grid is &lt;em&gt;18&lt;/em&gt;, which is less than the maximum possible to achieve in a 3x3 grid.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Legal and optimal solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;424\n313\n424\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Each 4 is adjacent to a &amp;quot;3&amp;quot;, &amp;quot;2&amp;quot;, and &amp;quot;1&amp;quot;; each &amp;quot;3&amp;quot; is adjacent to a &amp;quot;2&amp;quot; and 1&amp;quot;, and each &amp;quot;2&amp;quot; is adjacent to a &amp;quot;1&amp;quot;. The sum of the above grid is &lt;em&gt;27&lt;/em&gt;, which is a maximum achievable sum in a 3x3 grid.&lt;/p&gt;\n\n&lt;h3&gt;Tips&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I rated this problem as [hard], as I&amp;#39;m not personally aware of the computational complexity of an optimal algorithm to this problem, or even an algorithm which can scale to non-trivial grid sizes. &lt;/li&gt;\n&lt;li&gt;A naive brute force algorithm is on the order of c&lt;sup&gt;n&lt;/sup&gt; (exponential time), and thus is not feasible on normal computers beyond grids of about 4x4 size. &lt;/li&gt;\n&lt;li&gt;Verifying that a given solution is &lt;em&gt;legal&lt;/em&gt; is possible in linear time. I&amp;#39;m not sure if there is an algorithm to prove a given solution is &lt;em&gt;optimal&lt;/em&gt; any faster than producing an optimal solution to begin with.&lt;/li&gt;\n&lt;li&gt;If you don&amp;#39;t have an algorithm that provides a guaranteed optimal solution (either via brute force, mathematical proof, or some combination thereof), feel free to provide a heuristic/best guess one.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Bonus&lt;/h2&gt;\n\n&lt;p&gt;Generalize this problem to an m-by-n grid. In this case, the input will be two digits &amp;quot;m&amp;quot; and &amp;quot;n&amp;quot;, representing the width and height respectively, and the output would be a filled m-by-n grid. For example, input:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;grid(3,2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Could produce an optimal solution like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;313\n424\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was submitted by &lt;a href=\"/u/GeneReddit123\"&gt;/u/GeneReddit123&lt;/a&gt;, many thanks! If you have a challenge idea, please share it in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and there&amp;#39;s a good chance we&amp;#39;ll use it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nYou start with an empty grid of size m-by-m. Your goal is to fill it with numbers 1 through 9, so that the total sum of all numbers in the grid is the greatest.\n\n## Rules\n\nThe grid fill rules are as follows:\n\n* All cells must be filled with a number between 1 and 9.\n* You can fill any cell in the grid with \"1\".\n* You can fill any cell in the grid with \"2\", provided that cell is adjacent to a cell containing \"1\".\n* You can fill any cell in the grid with \"3\", provided that cell is both adjacent to a cell containing \"2\", and adjacent to another cell containing \"1\".\n* &amp;lt;snip&amp;gt;\n* You can fill any cell in the grid with \"9\", provided it is adjacent to cells containing 8, 7, 6, 5, 4, 3, 2, and 1.\n* \"Adjacent\" includes diagonals (i.e. in a move's reach of a chess King).\n* There are no limits on how many times you can use each number (except to comply with the above rules), and you are not obliged to use any number.\n* In case multiple optimal solutions (solutions with equally maximum total sums) are possible for a grid of a given size, producing any one is sufficient.\n\n# Formal Inputs and Outputs\n\n## Input\n\nThe input consists of a positive integer representing size \"m\" of an m-by-m grid, e.g.:\n\n    grid(3)\n\n## Output\n\nThe output consists of characters which represent a filled grid as per above rules, with an optimal solution (maximum total sum). The output format is a string of integers representing each row, with rows separated by line breaks (same format as the example solutions given below).\n\nBelow are example outputs for input:\n\n    grid(3)\n\n**Illegal solution:**\n\n    111\n    222\n    333\n\nBecause the bottom \"3\"s must each be adjacent to both a \"2\" and a \"1\", yet they are only adjacent to a \"2\".\n\n**Legal but suboptimal solution:**\n\n    123\n    321\n    123\n\nIn above example, each \"3\" is adjacent to a \"2\" and a \"1\", and each \"2\" is adjacent to a 1. However, the sum of the grid is *18*, which is less than the maximum possible to achieve in a 3x3 grid.\n\n**Legal and optimal solution:**\n\n    424\n    313\n    424\n\nEach 4 is adjacent to a \"3\", \"2\", and \"1\"; each \"3\" is adjacent to a \"2\" and 1\", and each \"2\" is adjacent to a \"1\". The sum of the above grid is *27*, which is a maximum achievable sum in a 3x3 grid.\n\n### Tips\n\n* I rated this problem as [hard], as I'm not personally aware of the computational complexity of an optimal algorithm to this problem, or even an algorithm which can scale to non-trivial grid sizes. \n* A naive brute force algorithm is on the order of c^n (exponential time), and thus is not feasible on normal computers beyond grids of about 4x4 size. \n* Verifying that a given solution is *legal* is possible in linear time. I'm not sure if there is an algorithm to prove a given solution is *optimal* any faster than producing an optimal solution to begin with.\n* If you don't have an algorithm that provides a guaranteed optimal solution (either via brute force, mathematical proof, or some combination thereof), feel free to provide a heuristic/best guess one.\n\n## Bonus\n\nGeneralize this problem to an m-by-n grid. In this case, the input will be two digits \"m\" and \"n\", representing the width and height respectively, and the output would be a filled m-by-n grid. For example, input:\n\n    grid(3,2)\n\nCould produce an optimal solution like:\n\n    313\n    424\n\n# Credit\n\nThis challenge was submitted by /u/GeneReddit123, many thanks! If you have a challenge idea, please share it in /r/dailyprogrammer_ideas and there's a good chance we'll use it.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "58n2ca", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_58n2ca", "score": 60, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/58n2ca/20161021_challenge_288_hard_adjacent_numbers/", "locked": false, "stickied": false, "created": 1477083587.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/58n2ca/20161021_challenge_288_hard_adjacent_numbers/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-10-21] Challenge #288 [Hard] Adjacent Numbers problems", "created_utc": 1477054787.0, "link_flair_text": null, "distinguished": null, "num_comments": 85, "visited": false, "num_reports": null, "ups": 60}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;This challenge is about drawing stars.&lt;/p&gt;\n\n&lt;p&gt;Specifically, each point should be equally spaced to the ones beside it, and should be connected to the two opposite points with a line.&lt;/p&gt;\n\n&lt;p&gt;Not the direct opposite though, like when you have an even number of points.&lt;/p&gt;\n\n&lt;p&gt;For example, take a look at &lt;a href=\"http://i.imgur.com/8A872Al.png\"&gt;this image.&lt;/a&gt; In the first star, the pentagram with an odd amount of points, it&amp;#39;s clear what &amp;quot;connected to the two opposite points&amp;quot; means.&lt;/p&gt;\n\n&lt;p&gt;In the hexagram it&amp;#39;s not just as clear. That&amp;#39;s why the image shows that exactly opposite points should not be connected.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;p&gt;You will be given the amount of vertices, or points in the specific star.&lt;/p&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;p&gt;The output should be any type of image with the star rendered onto it.&lt;/p&gt;\n\n&lt;h2&gt;Challenge input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;8\n7\n20\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Bonus challenge&lt;/h2&gt;\n\n&lt;p&gt;Surround the star by a polygon with the same amount of vertices. For example, if the input is 5, the output should be a pentagram (5-pointed star) surrounded by a pentagon.&lt;/p&gt;\n\n&lt;h2&gt;Tips&lt;/h2&gt;\n\n&lt;p&gt;If you want to find a point&amp;#39;s coordinates from only a distance and angle, here&amp;#39;s how to do that:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;x = d cos a\ny = d sin a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Remember that many languages measure in radians! To convert from degrees to radians, multiply by pi/180. If you want to find the relationship to pi, just divide by 180.&lt;/p&gt;\n\n&lt;p&gt;For example, 360/180 is 2, so 360\u00b0 is 2pi rad.&lt;/p&gt;\n\n&lt;p&gt;Also, &lt;a href=\"http://www.wolframalpha.com\"&gt;wolfram alpha&lt;/a&gt; is really useful for simplifying math expressions quickly.&lt;/p&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was suggested by &lt;a href=\"/u/tulanir\"&gt;/u/tulanir&lt;/a&gt;, thank you. If you have a challenge idea, please share it in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and there&amp;#39;s a good chance we&amp;#39;ll use it. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\nThis challenge is about drawing stars.\n\nSpecifically, each point should be equally spaced to the ones beside it, and should be connected to the two opposite points with a line.\n\nNot the direct opposite though, like when you have an even number of points.\n\nFor example, take a look at [this image.](http://i.imgur.com/8A872Al.png) In the first star, the pentagram with an odd amount of points, it's clear what \"connected to the two opposite points\" means.\n\nIn the hexagram it's not just as clear. That's why the image shows that exactly opposite points should not be connected.\n\n#Formal Inputs and Outputs\n\n## Input\n\nYou will be given the amount of vertices, or points in the specific star.\n\n## Output\n\nThe output should be any type of image with the star rendered onto it.\n\n## Challenge input\n\n    8\n    7\n    20\n\n## Bonus challenge\n\nSurround the star by a polygon with the same amount of vertices. For example, if the input is 5, the output should be a pentagram (5-pointed star) surrounded by a pentagon.\n\n##Tips\n\nIf you want to find a point's coordinates from only a distance and angle, here's how to do that:\n\n    x = d cos a\n    y = d sin a\n\nRemember that many languages measure in radians! To convert from degrees to radians, multiply by pi/180. If you want to find the relationship to pi, just divide by 180.\n\nFor example, 360/180 is 2, so 360\u00b0 is 2pi rad.\n\nAlso, [wolfram alpha](http://www.wolframalpha.com) is really useful for simplifying math expressions quickly.\n\n# Credit\n\nThis challenge was suggested by /u/tulanir, thank you. If you have a challenge idea, please share it in /r/dailyprogrammer_ideas and there's a good chance we'll use it. ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "589txl", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_589txl", "score": 47, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1476880362.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/589txl/20161019_challenge_288_intermediate_stars_and/", "locked": false, "stickied": false, "created": 1476906394.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/589txl/20161019_challenge_288_intermediate_stars_and/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-10-19] Challenge #288 [Intermediate] Stars and Stripes and Vertices", "created_utc": 1476877594.0, "link_flair_text": null, "distinguished": null, "num_comments": 31, "visited": false, "num_reports": null, "ups": 47}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Alliteration is defined as &amp;quot;the occurrence of the same letter or sound at the beginning of adjacent or closely connected words.&amp;quot; It&amp;#39;s a stylistic literary device identified by the repeated sound of the first consonant in a series of multiple words, or the repetition of the same sounds or of the same kinds of sounds at the beginning of words or in stressed syllables of a phrase. The first known use of the word to refer to a literary device occurred around 1624. A simple example is &amp;quot;Peter Piper Picked a Peck of Pickled Peppers&amp;quot;.&lt;/p&gt;\n\n&lt;h2&gt;Note on Stop Words&lt;/h2&gt;\n\n&lt;p&gt;The following are some of the simplest English &amp;quot;stop words&amp;quot;, words too common and uninformative to be of much use. In the case of Alliteration, they can come in between the words of interest (as in the Peter Piper example):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;I \na \nabout \nan \nand\nare \nas \nat \nbe \nby \ncom \nfor \nfrom\nhow\nin \nis \nit \nof \non \nor \nthat\nthe \nthis\nto \nwas \nwhat \nwhen\nwhere\nwho \nwill \nwith\nthe\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Input&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given an integer on a line, telling you how many lines follow. Then on the subsequent ines, you&amp;#39;ll be given a sentence, one per line. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;3\nPeter Piper Picked a Peck of Pickled Peppers\nBugs Bunny likes to dance the slow and simple shuffle\nYou&amp;#39;ll never put a better bit of butter on your knife\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Output&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit the words from each sentence that form the group of alliteration. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Peter Piper Picked Peck Pickled Peppers\nBugs Bunny      slow simple shuffle\nbetter bit butter\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;8\nThe daily diary of the American dream\nFor the sky and the sea, and the sea and the sky\nThree grey geese in a green field grazing, Grey were the geese and green was the grazing.\nBut a better butter makes a batter better.\n&amp;quot;His soul swooned slowly as he heard the snow falling faintly through the universe and faintly falling, like the descent of their last end, upon all the living and the dead.&amp;quot;\nWhisper words of wisdom, let it be.\nThey paved paradise and put up a parking lot.\nSo what we gonna have, dessert or disaster?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;daily diary\nsky sea\ngrey geese green grazing\nbetter butter batter better\nsoul swooned slowly\nwhisper words wisdom\npaved paradise\ndessert disaster\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;EDITED&lt;/strong&gt; to add the word &amp;quot;and&amp;quot; to the stop word list. My bad, a mistake to omit.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nAlliteration is defined as \"the occurrence of the same letter or sound at the beginning of adjacent or closely connected words.\" It's a stylistic literary device identified by the repeated sound of the first consonant in a series of multiple words, or the repetition of the same sounds or of the same kinds of sounds at the beginning of words or in stressed syllables of a phrase. The first known use of the word to refer to a literary device occurred around 1624. A simple example is \"Peter Piper Picked a Peck of Pickled Peppers\".\n\n## Note on Stop Words\n\nThe following are some of the simplest English \"stop words\", words too common and uninformative to be of much use. In the case of Alliteration, they can come in between the words of interest (as in the Peter Piper example):\n\n    I \n    a \n    about \n    an \n    and\n    are \n    as \n    at \n    be \n    by \n    com \n    for \n    from\n    how\n    in \n    is \n    it \n    of \n    on \n    or \n    that\n    the \n    this\n    to \n    was \n    what \n    when\n    where\n    who \n    will \n    with\n    the\n\n# Sample Input\n\nYou'll be given an integer on a line, telling you how many lines follow. Then on the subsequent ines, you'll be given a sentence, one per line. Example:\n\n    3\n    Peter Piper Picked a Peck of Pickled Peppers\n    Bugs Bunny likes to dance the slow and simple shuffle\n    You'll never put a better bit of butter on your knife\n\n# Sample Output\n\nYour program should emit the words from each sentence that form the group of alliteration. Example:\n\n    Peter Piper Picked Peck Pickled Peppers\n    Bugs Bunny      slow simple shuffle\n    better bit butter\n\n# Challenge Input\n\n    8\n    The daily diary of the American dream\n    For the sky and the sea, and the sea and the sky\n    Three grey geese in a green field grazing, Grey were the geese and green was the grazing.\n    But a better butter makes a batter better.\n    \"His soul swooned slowly as he heard the snow falling faintly through the universe and faintly falling, like the descent of their last end, upon all the living and the dead.\"\n    Whisper words of wisdom, let it be.\n    They paved paradise and put up a parking lot.\n    So what we gonna have, dessert or disaster?\n\n# Challenge Output\n\n    daily diary\n    sky sea\n    grey geese green grazing\n    better butter batter better\n    soul swooned slowly\n    whisper words wisdom\n    paved paradise\n    dessert disaster\n\n**EDITED** to add the word \"and\" to the stop word list. My bad, a mistake to omit.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "57zcbm", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_57zcbm", "score": 65, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1476743270.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/57zcbm/20161017_challenge_288_easy_detecting_alliteration/", "locked": false, "stickied": false, "created": 1476761874.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/57zcbm/20161017_challenge_288_easy_detecting_alliteration/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-10-17] Challenge #288 [Easy] Detecting Alliteration", "created_utc": 1476733074.0, "link_flair_text": null, "distinguished": null, "num_comments": 74, "visited": false, "num_reports": null, "ups": 65}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Read the problem carefully and make sure you understand it. This is a hard problem, so if it seems straightforward, you might be misreading something. Feel free to ask for clarification.&lt;/p&gt;\n\n&lt;p&gt;Consider the following procedure:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Take a list of the integers 1 through 999,999,999.&lt;/li&gt;\n&lt;li&gt;Write out each integer in English, so that you have 999,999,999 strings.&lt;/li&gt;\n&lt;li&gt;Sort the strings using &lt;a href=\"https://en.wikipedia.org/wiki/Alphabetical_order\"&gt;alphabetical order&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Concatenate them all into one big string.&lt;/li&gt;\n&lt;li&gt;Take the first 51 billion (51,000,000,000) letters of this big string.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Now, you probably can&amp;#39;t actually do this procedure. It would take too long or require too much memory. But determine what, if you did this procedure, would be the answers to the following questions about your final, 51-billion-letter string:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;What is the last letter in your string?&lt;/li&gt;\n&lt;li&gt;What is the last number named in your string? (Hint: your string will end at the end of a number.)&lt;/li&gt;\n&lt;li&gt;What is the sum of all the numbers named in your string?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You must actually be able to answer all these questions. Writing a program that would theoretically find the answer given a long time is &lt;strong&gt;not&lt;/strong&gt; a valid solution to this problem. There&amp;#39;s no strict runtime limit, but actually run your program to completion and get the answers before posting your code. (If you want a goal, my Python solution takes 0.05 seconds, but that fast is not necessary.)&lt;/p&gt;\n\n&lt;h1&gt;Details&lt;/h1&gt;\n\n&lt;p&gt;When you write the numbers out in step 2, omit spaces, punctuation, and the word &amp;quot;and&amp;quot;. Examples of how this step looks:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;100 -&amp;gt; onehundred\n1709 -&amp;gt; onethousandsevenhundrednine\n500000000 -&amp;gt; fivehundredmillion\n911610034 -&amp;gt; ninehundredelevenmillionsixhundredtenthousandthirtyfour\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first word in this list after sorting alphabetically is &lt;code&gt;eight&lt;/code&gt;, followed by &lt;code&gt;eighteen&lt;/code&gt;, then &lt;code&gt;eighteenmillion&lt;/code&gt;, then &lt;code&gt;eighteenmillioneight&lt;/code&gt;. Thus your final string will begin like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;eighteighteeneighteenmillioneighteenmillioneight...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And be 51 billion letters long.&lt;/p&gt;\n\n&lt;h1&gt;Example&lt;/h1&gt;\n\n&lt;p&gt;The procedure requires taking the first 51 billion letters in step 5. As an example, if instead I asked you to take the first 28 letters in step 5, then your final string would be:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;eighteighteeneighteenmillion\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the answers to the three questions would be:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;N&lt;/li&gt;\n&lt;li&gt;18000000 (eighteen million)&lt;/li&gt;\n&lt;li&gt;18000026 (8 + 18 + 18000000)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Same procedure, except start with the integers 1 through 999,999,999,999 in step 1, and take the first 68 trillion (68,000,000,000,000) letters in step 5. If I did it right (that&amp;#39;s a big &amp;quot;if&amp;quot;), this will also end on a number name boundary.&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;This is an old ITA Software hiring puzzle, and the solution can be found in several places on the web (including Reddit). So if you go looking for it, spoiler alert! On the other hand, it&amp;#39;s easy to check your solution by doing a web search for your answer to question #3.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=\"/u/wizao\"&gt;u/wizao&lt;/a&gt; for posting this challenge to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;r/dailyprogrammer_ideas&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nRead the problem carefully and make sure you understand it. This is a hard problem, so if it seems straightforward, you might be misreading something. Feel free to ask for clarification.\n\nConsider the following procedure:\n\n1. Take a list of the integers 1 through 999,999,999.\n2. Write out each integer in English, so that you have 999,999,999 strings.\n3. Sort the strings using [alphabetical order](https://en.wikipedia.org/wiki/Alphabetical_order).\n4. Concatenate them all into one big string.\n5. Take the first 51 billion (51,000,000,000) letters of this big string.\n\nNow, you probably can't actually do this procedure. It would take too long or require too much memory. But determine what, if you did this procedure, would be the answers to the following questions about your final, 51-billion-letter string:\n\n1. What is the last letter in your string?\n2. What is the last number named in your string? (Hint: your string will end at the end of a number.)\n3. What is the sum of all the numbers named in your string?\n\nYou must actually be able to answer all these questions. Writing a program that would theoretically find the answer given a long time is **not** a valid solution to this problem. There's no strict runtime limit, but actually run your program to completion and get the answers before posting your code. (If you want a goal, my Python solution takes 0.05 seconds, but that fast is not necessary.)\n\n# Details\n\nWhen you write the numbers out in step 2, omit spaces, punctuation, and the word \"and\". Examples of how this step looks:\n\n    100 -&gt; onehundred\n    1709 -&gt; onethousandsevenhundrednine\n    500000000 -&gt; fivehundredmillion\n    911610034 -&gt; ninehundredelevenmillionsixhundredtenthousandthirtyfour\n\nThe first word in this list after sorting alphabetically is `eight`, followed by `eighteen`, then `eighteenmillion`, then `eighteenmillioneight`. Thus your final string will begin like this:\n\n    eighteighteeneighteenmillioneighteenmillioneight...\n\nAnd be 51 billion letters long.\n\n# Example\n\nThe procedure requires taking the first 51 billion letters in step 5. As an example, if instead I asked you to take the first 28 letters in step 5, then your final string would be:\n\n    eighteighteeneighteenmillion\n\nAnd the answers to the three questions would be:\n\n1. N\n2. 18000000 (eighteen million)\n3. 18000026 (8 + 18 + 18000000)\n\n# Bonus\n\nSame procedure, except start with the integers 1 through 999,999,999,999 in step 1, and take the first 68 trillion (68,000,000,000,000) letters in step 5. If I did it right (that's a big \"if\"), this will also end on a number name boundary.\n\n# Notes\n\nThis is an old ITA Software hiring puzzle, and the solution can be found in several places on the web (including Reddit). So if you go looking for it, spoiler alert! On the other hand, it's easy to check your solution by doing a web search for your answer to question #3.\n\n*Thanks to u/wizao for posting this challenge to r/dailyprogrammer_ideas!*", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "57fzcv", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Cosmologicon", "media": null, "name": "t3_57fzcv", "score": 83, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1476554011.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/57fzcv/20161014_challenge_287_hard_word_numbers/", "locked": false, "stickied": false, "created": 1476475371.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/57fzcv/20161014_challenge_287_hard_word_numbers/", "author_flair_text": "2 3", "quarantine": false, "title": "[2016-10-14] Challenge #287 [Hard] Word Numbers", "created_utc": 1476446571.0, "link_flair_text": null, "distinguished": null, "num_comments": 14, "visited": false, "num_reports": null, "ups": 83}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;A mathagram is a puzzle where you have to fill in missing digits (x&amp;#39;s) in a formula such that (1) the formula is true, and (2) every digit 1-9 is used exactly once. The formulas have the form:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxx + xxx = xxx\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Write a program that lets you find solutions to mathagram puzzles. You can load the puzzle into your program using whatever format you want. You don&amp;#39;t have to parse it as program input, and you don&amp;#39;t need to format your output in any particular way. (You can do these things if you want to, of course.)&lt;/p&gt;\n\n&lt;p&gt;There are generally multiple possible solutions for a mathagram puzzle. You only need to find any one solution that fits the constraints.&lt;/p&gt;\n\n&lt;h1&gt;Example problem&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;1xx + xxx = 468\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Example solution&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;193 + 275 = 468\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge problems&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;xxx + x81 = 9x4  \nxxx + 5x1 = 86x\nxxx + 39x = x75\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus 1&lt;/h1&gt;\n\n&lt;p&gt;Extend your solution so that you can &lt;strong&gt;efficiently&lt;/strong&gt; solve double mathagrams puzzles. In double puzzles, every digit from 1 through 9 is used twice, and the formulas have the form:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxx + xxx + xxx + xxx = xxx + xxx\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example problem for bonus 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxx + xxx + 5x3 + 123 = xxx + 795\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example solution for bonus 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;241 + 646 + 583 + 123 = 798 + 795\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;A solution to the bonus is only valid if it completes in a reasonable amount of time!&lt;/em&gt; Solve all of these challenge inputs before posting your code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxx + xxx + 23x + 571 = xxx + x82\nxxx + xxx + xx7 + 212 = xxx + 889\nxxx + xxx + 1x6 + 142 = xxx + 553\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus 2&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Efficiently&lt;/strong&gt; solve triple mathagrams puzzles. Every digit from 1 through 9 is used three times, and the formulas have the form:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxx + xxx + xxx + xxx + xxx = xxx + xxx + xxx + xxx\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example problem and solution for bonus 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxx + xxx + xxx + x29 + 821 = xxx + xxx + 8xx + 867\n943 + 541 + 541 + 529 + 821 = 972 + 673 + 863 + 867\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Again, your solution &lt;strong&gt;must&lt;/strong&gt; be efficient! Solve all of these challenge inputs before posting your code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxx + xxx + xxx + 4x1 + 689 = xxx + xxx + x5x + 957\nxxx + xxx + xxx + 64x + 581 = xxx + xxx + xx2 + 623\nxxx + xxx + xxx + x81 + 759 = xxx + xxx + 8xx + 462\nxxx + xxx + xxx + 6x3 + 299 = xxx + xxx + x8x + 423\nxxx + xxx + xxx + 58x + 561 = xxx + xxx + xx7 + 993\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT: two more test cases from &lt;a href=\"/u/kalmakka\"&gt;u/kalmakka&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxx + xxx + xxx + xxx + xxx = 987 + 944 + 921 + 8xx\n987 + 978 + 111 + 222 + 33x = xxx + xxx + xxx + xxx\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=\"/u/jnazario\"&gt;u/jnazario&lt;/a&gt; for posting the idea behind today&amp;#39;s challenge on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;r/dailyprogrammer_ideas&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nA mathagram is a puzzle where you have to fill in missing digits (x's) in a formula such that (1) the formula is true, and (2) every digit 1-9 is used exactly once. The formulas have the form:\n\n    xxx + xxx = xxx\n\nWrite a program that lets you find solutions to mathagram puzzles. You can load the puzzle into your program using whatever format you want. You don't have to parse it as program input, and you don't need to format your output in any particular way. (You can do these things if you want to, of course.)\n\nThere are generally multiple possible solutions for a mathagram puzzle. You only need to find any one solution that fits the constraints.\n\n# Example problem\n\n    1xx + xxx = 468\n\n# Example solution\n\n    193 + 275 = 468\n\n# Challenge problems\n\n    xxx + x81 = 9x4  \n    xxx + 5x1 = 86x\n    xxx + 39x = x75\n\n# Bonus 1\n\nExtend your solution so that you can **efficiently** solve double mathagrams puzzles. In double puzzles, every digit from 1 through 9 is used twice, and the formulas have the form:\n\n    xxx + xxx + xxx + xxx = xxx + xxx\n\nExample problem for bonus 1:\n\n    xxx + xxx + 5x3 + 123 = xxx + 795\n\nExample solution for bonus 1:\n\n    241 + 646 + 583 + 123 = 798 + 795\n\n*A solution to the bonus is only valid if it completes in a reasonable amount of time!* Solve all of these challenge inputs before posting your code:\n\n    xxx + xxx + 23x + 571 = xxx + x82\n    xxx + xxx + xx7 + 212 = xxx + 889\n    xxx + xxx + 1x6 + 142 = xxx + 553\n\n# Bonus 2\n\n**Efficiently** solve triple mathagrams puzzles. Every digit from 1 through 9 is used three times, and the formulas have the form:\n\n    xxx + xxx + xxx + xxx + xxx = xxx + xxx + xxx + xxx\n\nExample problem and solution for bonus 2:\n\n    xxx + xxx + xxx + x29 + 821 = xxx + xxx + 8xx + 867\n    943 + 541 + 541 + 529 + 821 = 972 + 673 + 863 + 867\n\nAgain, your solution **must** be efficient! Solve all of these challenge inputs before posting your code:\n\n    xxx + xxx + xxx + 4x1 + 689 = xxx + xxx + x5x + 957\n    xxx + xxx + xxx + 64x + 581 = xxx + xxx + xx2 + 623\n    xxx + xxx + xxx + x81 + 759 = xxx + xxx + 8xx + 462\n    xxx + xxx + xxx + 6x3 + 299 = xxx + xxx + x8x + 423\n    xxx + xxx + xxx + 58x + 561 = xxx + xxx + xx7 + 993\n\nEDIT: two more test cases from u/kalmakka:\n\n    xxx + xxx + xxx + xxx + xxx = 987 + 944 + 921 + 8xx\n    987 + 978 + 111 + 222 + 33x = xxx + xxx + xxx + xxx\n\n*Thanks to u/jnazario for posting the idea behind today's challenge on r/dailyprogrammer_ideas!*", "likes": null, "suggested_sort": "new", "user_reports": [], "secure_media": null, "saved": false, "id": "576o8o", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Cosmologicon", "media": null, "name": "t3_576o8o", "score": 63, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1476395571.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/576o8o/20161012_challenge_287_intermediate_mathagrams/", "locked": false, "stickied": false, "created": 1476336948.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/576o8o/20161012_challenge_287_intermediate_mathagrams/", "author_flair_text": "2 3", "quarantine": false, "title": "[2016-10-12] Challenge #287 [Intermediate] Mathagrams", "created_utc": 1476308148.0, "link_flair_text": null, "distinguished": null, "num_comments": 54, "visited": false, "num_reports": null, "ups": 63}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Write a function that, given a 4-digit number, returns the largest digit in that number. Numbers between 0 and 999 are counted as 4-digit numbers with leading 0&amp;#39;s.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;largest_digit(1234) -&amp;gt; 4\nlargest_digit(3253) -&amp;gt; 5\nlargest_digit(9800) -&amp;gt; 9\nlargest_digit(3333) -&amp;gt; 3\nlargest_digit(120) -&amp;gt; 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the last example, given an input of &lt;code&gt;120&lt;/code&gt;, we treat it as the 4-digit number &lt;code&gt;0120&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Today&amp;#39;s challenge is really more of a warmup for the bonuses. If you were able to complete it, I highly recommend giving the bonuses a shot!&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Bonus 1&lt;/h1&gt;\n\n&lt;p&gt;Write a function that, given a 4-digit number, performs the &amp;quot;descending digits&amp;quot; operation. This operation returns a number with the same 4 digits sorted in descending order.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;desc_digits(1234) -&amp;gt; 4321\ndesc_digits(3253) -&amp;gt; 5332\ndesc_digits(9800) -&amp;gt; 9800\ndesc_digits(3333) -&amp;gt; 3333\ndesc_digits(120) -&amp;gt; 2100\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus 2&lt;/h1&gt;\n\n&lt;p&gt;Write a function that counts the number of iterations in Kaprekar&amp;#39;s Routine, which is as follows.&lt;/p&gt;\n\n&lt;p&gt;Given a 4-digit number &lt;em&gt;that has at least two different digits&lt;/em&gt;, take that number&amp;#39;s descending digits, and subtract that number&amp;#39;s ascending digits. For example, given &lt;code&gt;6589&lt;/code&gt;, you should take &lt;code&gt;9865 - 5689&lt;/code&gt;, which is &lt;code&gt;4176&lt;/code&gt;. Repeat this process with &lt;code&gt;4176&lt;/code&gt; and you&amp;#39;ll get &lt;code&gt;7641 - 1467&lt;/code&gt;, which is &lt;code&gt;6174&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Once you get to 6174 you&amp;#39;ll stay there if you repeat the process. In this case we applied the process 2 times before reaching 6174, so our output for &lt;code&gt;6589&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;kaprekar(6589) -&amp;gt; 2\nkaprekar(5455) -&amp;gt; 5\nkaprekar(6174) -&amp;gt; 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Numbers like 3333 would immediately go to 0 under this routine, but since we require at least two different digits in the input, all numbers will eventually reach 6174, which is known as Kaprekar&amp;#39;s Constant. &lt;a href=\"https://www.youtube.com/watch?v=d8TRcZklX_Q\"&gt;Watch this video if you&amp;#39;re still unclear on how Kaprekar&amp;#39;s Routine works&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;What is the largest number of iterations for Kaprekar&amp;#39;s Routine to reach 6174? That is, what&amp;#39;s the largest possible output for your &lt;code&gt;kaprekar&lt;/code&gt; function, given a valid input? Post the answer along with your solution.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=\"/u/BinaryLinux\"&gt;u/BinaryLinux&lt;/a&gt; and &lt;a href=\"/u/Racoonie\"&gt;u/Racoonie&lt;/a&gt; for posting the idea behind this challenge in &lt;a href=\"/r/daliyprogrammer_ideas\"&gt;r/daliyprogrammer_ideas&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nWrite a function that, given a 4-digit number, returns the largest digit in that number. Numbers between 0 and 999 are counted as 4-digit numbers with leading 0's.\n\n    largest_digit(1234) -&gt; 4\n    largest_digit(3253) -&gt; 5\n    largest_digit(9800) -&gt; 9\n    largest_digit(3333) -&gt; 3\n    largest_digit(120) -&gt; 2\n\nIn the last example, given an input of `120`, we treat it as the 4-digit number `0120`.\n\n*Today's challenge is really more of a warmup for the bonuses. If you were able to complete it, I highly recommend giving the bonuses a shot!*\n\n# Bonus 1\n\nWrite a function that, given a 4-digit number, performs the \"descending digits\" operation. This operation returns a number with the same 4 digits sorted in descending order.\n\n    desc_digits(1234) -&gt; 4321\n    desc_digits(3253) -&gt; 5332\n    desc_digits(9800) -&gt; 9800\n    desc_digits(3333) -&gt; 3333\n    desc_digits(120) -&gt; 2100\n\n# Bonus 2\n\nWrite a function that counts the number of iterations in Kaprekar's Routine, which is as follows.\n\nGiven a 4-digit number *that has at least two different digits*, take that number's descending digits, and subtract that number's ascending digits. For example, given `6589`, you should take `9865 - 5689`, which is `4176`. Repeat this process with `4176` and you'll get `7641 - 1467`, which is `6174`.\n\nOnce you get to 6174 you'll stay there if you repeat the process. In this case we applied the process 2 times before reaching 6174, so our output for `6589` is `2`.\n\n    kaprekar(6589) -&gt; 2\n    kaprekar(5455) -&gt; 5\n    kaprekar(6174) -&gt; 0\n\nNumbers like 3333 would immediately go to 0 under this routine, but since we require at least two different digits in the input, all numbers will eventually reach 6174, which is known as Kaprekar's Constant. [Watch this video if you're still unclear on how Kaprekar's Routine works](https://www.youtube.com/watch?v=d8TRcZklX_Q).\n\nWhat is the largest number of iterations for Kaprekar's Routine to reach 6174? That is, what's the largest possible output for your `kaprekar` function, given a valid input? Post the answer along with your solution.\n\n*Thanks to u/BinaryLinux and u/Racoonie for posting the idea behind this challenge in r/daliyprogrammer_ideas!*", "likes": null, "suggested_sort": "new", "user_reports": [], "secure_media": null, "saved": false, "id": "56tbds", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Cosmologicon", "media": null, "name": "t3_56tbds", "score": 98, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1476141671.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/56tbds/20161010_challenge_287_easy_kaprekars_routine/", "locked": false, "stickied": false, "created": 1476150810.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/56tbds/20161010_challenge_287_easy_kaprekars_routine/", "author_flair_text": "2 3", "quarantine": false, "title": "[2016-10-10] Challenge #287 [Easy] Kaprekar's Routine", "created_utc": 1476122010.0, "link_flair_text": null, "distinguished": null, "num_comments": 228, "visited": false, "num_reports": null, "ups": 98}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So this week, let&amp;#39;s do some mini challenges. Too small for an easy but great for a mini challenge. Here is your chance to post some good warm up mini challenges. How it works. Start a new main thread in here. &lt;/p&gt;\n\n&lt;p&gt;if you post a challenge, here&amp;#39;s a template from &lt;a href=\"/u/lengau\"&gt;/u/lengau&lt;/a&gt; for anyone wanting to post challenges (you can copy/paste this text rather than having to get the source):&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;**[CHALLENGE NAME]** - [CHALLENGE DESCRIPTION]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;**Given:** [INPUT DESCRIPTION]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;**Output:** [EXPECTED OUTPUT DESCRIPTION]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;**Special:** [ANY POSSIBLE SPECIAL INSTRUCTIONS]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;**Challenge input:** [SAMPLE INPUT]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;If you want to solve a mini challenge you reply in that thread. Simple. Keep checking back all week as people will keep posting challenges and solve the ones you want.&lt;/p&gt;\n\n&lt;p&gt;Please check other mini challenges before posting one to avoid duplications within a certain reason.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "So this week, let's do some mini challenges. Too small for an easy but great for a mini challenge. Here is your chance to post some good warm up mini challenges. How it works. Start a new main thread in here. \n\nif you post a challenge, here's a template from /u/lengau for anyone wanting to post challenges (you can copy/paste this text rather than having to get the source):\n\n`**[CHALLENGE NAME]** - [CHALLENGE DESCRIPTION]`\n\n` `\n\n`**Given:** [INPUT DESCRIPTION]`\n\n` `\n\n`**Output:** [EXPECTED OUTPUT DESCRIPTION]`\n\n` `\n\n`**Special:** [ANY POSSIBLE SPECIAL INSTRUCTIONS]`\n\n` `\n\n`**Challenge input:** [SAMPLE INPUT]`\n\n` `\n\nIf you want to solve a mini challenge you reply in that thread. Simple. Keep checking back all week as people will keep posting challenges and solve the ones you want.\n\nPlease check other mini challenges before posting one to avoid duplications within a certain reason.\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "56mfgz", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_56mfgz", "score": 68, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/56mfgz/weekly_26_mini_challenges/", "locked": false, "stickied": false, "created": 1476052700.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/56mfgz/weekly_26_mini_challenges/", "author_flair_text": "2 0", "quarantine": false, "title": "Weekly #26 - Mini Challenges", "created_utc": 1476023900.0, "link_flair_text": null, "distinguished": null, "num_comments": 35, "visited": false, "num_reports": null, "ups": 68}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; The one I had posted earlier turns out to be a &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/42x90t/20160127_challenge_251_hard_solve_a_nonogram_bonus/\"&gt;repeat one one earlier this year&lt;/a&gt;, so here&amp;#39;s a fresh one. &lt;/p&gt;\n\n&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;The game of Rush Hour is a puzzle game wherein the player has to slide the cars from their original position to allow the escape car to exit the board. Rush Hour is similar to other sliding puzzles, but with a twist: each piece moves along only one direction, instead of moving both horizontally and vertically. This makes individual moves easier to understand, and sequences easier to visualize. This is basically how cars move - forwards or backwards. &lt;/p&gt;\n\n&lt;p&gt;Rush Hour includes a 6x6 playing board with an exit opening along on edge, a red escape car, and several blocking cars (of dimensions 2x1) and several blocking trucks (of dimensions 3x1 ).  The goal is to slide the red car (the escape vehicle) through the exit opening in the edge of the grid. To play, shift the cars and trucks up and down, left and right, until the path is cleared to slide the escape vehicle out the exit. You may not lift pieces off the grid. Pieces may only move forward and back, not sideways &lt;/p&gt;\n\n&lt;p&gt;In this challenge you&amp;#39;ll be given a starting layout, then you have to show how to move the cars to allow the red escape car to exit the board. &lt;/p&gt;\n\n&lt;h1&gt;Sample Input&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given the 6x6 (or 7x7) board, indicating the exit (with a &lt;code&gt;&amp;gt;&lt;/code&gt;), along with the red escape car (marked with an &lt;code&gt;R&lt;/code&gt;), and blocking cars (2x1 sized, indicated with letters &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;G&lt;/code&gt;) and trucks (3x1 sized, indicated with letters &lt;code&gt;T&lt;/code&gt; through &lt;code&gt;Z&lt;/code&gt;). Empty spaces will be marked with a &lt;code&gt;.&lt;/code&gt;. The way the cars are facing should be obvious from their orientation. Remember, they can only move forwards or backwards. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;GAA..Y\nG.V..Y\nRRV..Y&amp;gt;\n..VZZZ\n....B.\nWWW.B.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Output&lt;/h1&gt;\n\n&lt;p&gt;Find a solution to the puzzle, preferably one with the minimal number of steps. You should indicate which cars move in which direction to liberate the red escape car (&lt;code&gt;R&lt;/code&gt;). From our example above here&amp;#39;s a solution with &lt;code&gt;+&lt;/code&gt; indicating to the right or down N squares, &lt;code&gt;-&lt;/code&gt; indicating to the left or up N squares (plus or minus relative to a 0,0 cell in the top left corner):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;A +2 \nV -1\nZ -1\nY +3\nR +5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;TTTAU.\n...AU.\nRR..UB&amp;gt;\nCDDFFB\nCEEG.H\nVVVG.H\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;R +1\nC -2\nD -1\nF -1\nU +3\nB -2\nR +4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Puzzles via the &lt;a href=\"http://www.puzzles.com/puzzlesineducation/plans/rushhourguide.pdf\"&gt;Rush Hour puzzle site&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "*Note* The one I had posted earlier turns out to be a [repeat one one earlier this year](https://www.reddit.com/r/dailyprogrammer/comments/42x90t/20160127_challenge_251_hard_solve_a_nonogram_bonus/), so here's a fresh one. \n\n# Description\n\nThe game of Rush Hour is a puzzle game wherein the player has to slide the cars from their original position to allow the escape car to exit the board. Rush Hour is similar to other sliding puzzles, but with a twist: each piece moves along only one direction, instead of moving both horizontally and vertically. This makes individual moves easier to understand, and sequences easier to visualize. This is basically how cars move - forwards or backwards. \n\nRush Hour includes a 6x6 playing board with an exit opening along on edge, a red escape car, and several blocking cars (of dimensions 2x1) and several blocking trucks (of dimensions 3x1 ).  The goal is to slide the red car (the escape vehicle) through the exit opening in the edge of the grid. To play, shift the cars and trucks up and down, left and right, until the path is cleared to slide the escape vehicle out the exit. You may not lift pieces off the grid. Pieces may only move forward and back, not sideways \n\nIn this challenge you'll be given a starting layout, then you have to show how to move the cars to allow the red escape car to exit the board. \n\n# Sample Input\n\nYou'll be given the 6x6 (or 7x7) board, indicating the exit (with a `&gt;`), along with the red escape car (marked with an `R`), and blocking cars (2x1 sized, indicated with letters `A` through `G`) and trucks (3x1 sized, indicated with letters `T` through `Z`). Empty spaces will be marked with a `.`. The way the cars are facing should be obvious from their orientation. Remember, they can only move forwards or backwards. Example:\n\n    GAA..Y\n    G.V..Y\n    RRV..Y&gt;\n    ..VZZZ\n    ....B.\n    WWW.B.\n\n# Sample Output\n\nFind a solution to the puzzle, preferably one with the minimal number of steps. You should indicate which cars move in which direction to liberate the red escape car (`R`). From our example above here's a solution with `+` indicating to the right or down N squares, `-` indicating to the left or up N squares (plus or minus relative to a 0,0 cell in the top left corner):\n\n    A +2 \n    V -1\n    Z -1\n    Y +3\n    R +5\n\n# Challenge Input\n\n    TTTAU.\n    ...AU.\n    RR..UB&gt;\n    CDDFFB\n    CEEG.H\n    VVVG.H\n\n# Challenge Output\n\n    R +1\n    C -2\n    D -1\n    F -1\n    U +3\n    B -2\n    R +4\n\nPuzzles via the [Rush Hour puzzle site](http://www.puzzles.com/puzzlesineducation/plans/rushhourguide.pdf).\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "56bh88", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_56bh88", "score": 52, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/56bh88/20161007_challenge_286_hard_rush_hour_solver/", "locked": false, "stickied": false, "created": 1475877512.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/56bh88/20161007_challenge_286_hard_rush_hour_solver/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-10-07] Challenge #286 [Hard] Rush Hour Solver", "created_utc": 1475848712.0, "link_flair_text": null, "distinguished": null, "num_comments": 20, "visited": false, "num_reports": null, "ups": 52}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "reddit.com", "subreddit": "dailyprogrammer", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "55z8r6", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_55z8r6", "score": 84, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/55z8r6/psa_monthly_challenge_11_october_2016_procedural/", "locked": false, "stickied": false, "created": 1475699851.0, "url": "https://www.reddit.com/r/proceduralgeneration/comments/55xkud/monthly_challenge_11_october_2016_procedural/", "author_flair_text": "0 0", "quarantine": false, "title": "[PSA] [Monthly Challenge #11 - October, 2016] - Procedural Ghosts and Jack-o-Lanterns! \u2022 /r/proceduralgeneration", "created_utc": 1475671051.0, "link_flair_text": null, "distinguished": null, "num_comments": 0, "visited": false, "num_reports": null, "ups": 84}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Zeckendorf&amp;#39;s theorem, named after Belgian mathematician Edouard Zeckendorf, is a theorem about the representation of integers as sums of Fibonacci numbers.&lt;/p&gt;\n\n&lt;p&gt;Zeckendorf&amp;#39;s theorem states that every positive integer can be represented uniquely as the sum of one or more distinct Fibonacci numbers in such a way that the sum does not include any two consecutive Fibonacci numbers. &lt;/p&gt;\n\n&lt;p&gt;For example, the Zeckendorf representation of 100 is&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;100 = 89 + 8 + 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are other ways of representing 100 as the sum of Fibonacci numbers \u2013 for example&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;100 = 89 + 8 + 2 + 1\n100 = 55 + 34 + 8 + 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but these are not Zeckendorf representations because 1 and 2 are consecutive Fibonacci numbers, as are 34 and 55.&lt;/p&gt;\n\n&lt;p&gt;Your challenge today is to write a program that can decompose a positive integer into its Zeckendorf representation.&lt;/p&gt;\n\n&lt;h1&gt;Sample Input&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given a number &lt;em&gt;N&lt;/em&gt; on the first line, telling you how many lines to read. You&amp;#39;ll be given a list of &lt;em&gt;N&lt;/em&gt; positive integers, one per line. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;3\n4\n100\n30\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Output&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit the Zeckendorf representation for each of the numbers. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 = 3 + 1\n100 = 89 + 8 + 3 \n30 = 21 + 8 + 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;5\n120\n34\n88\n90\n320\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nZeckendorf's theorem, named after Belgian mathematician Edouard Zeckendorf, is a theorem about the representation of integers as sums of Fibonacci numbers.\n\nZeckendorf's theorem states that every positive integer can be represented uniquely as the sum of one or more distinct Fibonacci numbers in such a way that the sum does not include any two consecutive Fibonacci numbers. \n\nFor example, the Zeckendorf representation of 100 is\n\n    100 = 89 + 8 + 3\n\nThere are other ways of representing 100 as the sum of Fibonacci numbers \u2013 for example\n\n    100 = 89 + 8 + 2 + 1\n    100 = 55 + 34 + 8 + 3\n\nbut these are not Zeckendorf representations because 1 and 2 are consecutive Fibonacci numbers, as are 34 and 55.\n\nYour challenge today is to write a program that can decompose a positive integer into its Zeckendorf representation.\n\n# Sample Input\n\nYou'll be given a number *N* on the first line, telling you how many lines to read. You'll be given a list of *N* positive integers, one per line. Example:\n\n    3\n    4\n    100\n    30\n\n# Sample Output\n\nYour program should emit the Zeckendorf representation for each of the numbers. Example:\n\n    4 = 3 + 1\n    100 = 89 + 8 + 3 \n    30 = 21 + 8 + 1\n\n# Challenge Input\n\n    5\n    120\n    34\n    88\n    90\n    320\n\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "55zdxx", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_55zdxx", "score": 34, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/55zdxx/20161005_challenge_286_intermediate_zeckendorf/", "locked": false, "stickied": false, "created": 1475701950.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/55zdxx/20161005_challenge_286_intermediate_zeckendorf/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-10-05] Challenge #286 [Intermediate] Zeckendorf Representations of Positive Integers", "created_utc": 1475673150.0, "link_flair_text": null, "distinguished": null, "num_comments": 76, "visited": false, "num_reports": null, "ups": 34}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Nearly everyone is familiar with the factorial operator in math. 5! yields 120 because factorial means &amp;quot;multiply successive terms where each are one less than the previous&amp;quot;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;5! -&amp;gt; 5 * 4 * 3 * 2 * 1 -&amp;gt; 120\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple enough. &lt;/p&gt;\n\n&lt;p&gt;Now let&amp;#39;s reverse it. Could you write a function that tells us that &amp;quot;120&amp;quot; is &amp;quot;5!&amp;quot;? &lt;/p&gt;\n\n&lt;p&gt;Hint: The strategy is pretty straightforward, just divide the term by successively larger terms until you get to &amp;quot;1&amp;quot; as the resultant:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;120 -&amp;gt; 120/2 -&amp;gt; 60/3 -&amp;gt; 20/4 -&amp;gt; 5/5 -&amp;gt; 1 =&amp;gt; 5!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Input&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given a single integer, one per line. Examples:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;120\n150\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Output&lt;/h1&gt;\n\n&lt;p&gt;Your program should report what each number is as a factorial, or &amp;quot;NONE&amp;quot; if it&amp;#39;s not legitimately a factorial. Examples:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;120 = 5!\n150   NONE\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;3628800\n479001600\n6\n18\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;3628800 = 10!\n479001600 = 12!\n6 = 3!\n18  NONE\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nNearly everyone is familiar with the factorial operator in math. 5! yields 120 because factorial means \"multiply successive terms where each are one less than the previous\":\n\n    5! -&gt; 5 * 4 * 3 * 2 * 1 -&gt; 120\n\nSimple enough. \n\nNow let's reverse it. Could you write a function that tells us that \"120\" is \"5!\"? \n\nHint: The strategy is pretty straightforward, just divide the term by successively larger terms until you get to \"1\" as the resultant:\n\n    120 -&gt; 120/2 -&gt; 60/3 -&gt; 20/4 -&gt; 5/5 -&gt; 1 =&gt; 5!\n\n# Sample Input\n\nYou'll be given a single integer, one per line. Examples:\n\n    120\n    150\n\n# Sample Output\n\nYour program should report what each number is as a factorial, or \"NONE\" if it's not legitimately a factorial. Examples:\n\n    120 = 5!\n    150   NONE\n\n# Challenge Input\n\n    3628800\n    479001600\n    6\n    18\n\n# Challenge Output\n\n    3628800 = 10!\n    479001600 = 12!\n    6 = 3!\n    18  NONE\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "55nior", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_55nior", "score": 110, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/55nior/20161003_challenge_286_easy_reverse_factorial/", "locked": false, "stickied": false, "created": 1475528350.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/55nior/20161003_challenge_286_easy_reverse_factorial/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-10-03] Challenge #286 [Easy] Reverse Factorial", "created_utc": 1475499550.0, "link_flair_text": null, "distinguished": null, "num_comments": 281, "visited": false, "num_reports": null, "ups": 110}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Determine if a mathematical expression is logically equivalent&lt;/p&gt;\n\n&lt;h1&gt;Part 1&lt;/h1&gt;\n\n&lt;p&gt;Determine if a mathematical expression is logically equivalent\nOur first program will only support 4 basic operators; &lt;code&gt;+&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;,&lt;code&gt;*&lt;/code&gt;,&lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Examples of logically equivalent expressions:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;x + x = 2x\n2*x = 2x\n2(x + y) = 2x + 2y\na + b = b + a\nx - x = 0\ny/2 = (1/2)*y\n-(-x) = x\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Examples of &lt;em&gt;not&lt;/em&gt; logically equivalent expressions:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;2 = 3\na - b - c = a - (b - c)\nx + y = a + b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Part 2&lt;/h1&gt;\n\n&lt;p&gt;Support more advanced operators such as &lt;code&gt;^&lt;/code&gt;,&lt;code&gt;log&lt;/code&gt;, derivatives, bit shifts, booleans, or whatever you can come up with.  This part is more open, so feel free to show off your additions.&lt;/p&gt;\n\n&lt;p&gt;Examples of extensions:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;x^2 * x^3 = x^5\n(x + 2)^(y + 2) = 4x(2 + x)^y + 4(2 + x)^y + (2 + x)^y * x^2\n!(a &amp;amp;&amp;amp; b) = !a || !b\nx &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; 2 = x &amp;lt;&amp;lt; 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Part 3&lt;/h1&gt;\n\n&lt;p&gt;Your solution should create a proof of the steps your program took to show the expression was valid or invalid.&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th align=\"left\"&gt;Statements&lt;/th&gt;\n&lt;th align=\"left\"&gt;Reasons&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;2(x + y) + 0 = 2x + 2y&lt;/td&gt;\n&lt;td align=\"left\"&gt;1. Given&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;2x + 2y + 0 = 2x + 2y&lt;/td&gt;\n&lt;td align=\"left\"&gt;2. Distributive Property of Multiplication&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;2x + 2y = 2x + 2y&lt;/td&gt;\n&lt;td align=\"left\"&gt;3. Identity Property of Addition&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th align=\"left\"&gt;Statements&lt;/th&gt;\n&lt;th align=\"left\"&gt;Reasons&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;x + y = a + b&lt;/td&gt;\n&lt;td align=\"left\"&gt;1. Given&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;3 = 7&lt;/td&gt;\n&lt;td align=\"left\"&gt;2. Contradiction for x=1, y=2, a=3, b=4&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;I&amp;#39;m inclined to treat undefined expressions as not equivalent to anything.  Such as divide by zero:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;x/0 = x/0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;thanks&lt;/h1&gt;\n\n&lt;p&gt;Thanks to &lt;a href=\"/u/wizao\"&gt;u/wizao&lt;/a&gt; for submitting this idea through &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;r/dailyprogrammer_ideas&lt;/a&gt; &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nDetermine if a mathematical expression is logically equivalent\n\t\t\n# Part 1\n\nDetermine if a mathematical expression is logically equivalent\nOur first program will only support 4 basic operators; `+`,`-`,`*`,`/`.\n\nExamples of logically equivalent expressions:\n\n    x + x = 2x\n    2*x = 2x\n    2(x + y) = 2x + 2y\n    a + b = b + a\n    x - x = 0\n    y/2 = (1/2)*y\n    -(-x) = x\n\t\t\nExamples of *not* logically equivalent expressions:\n\n    2 = 3\n    a - b - c = a - (b - c)\n    x + y = a + b\n\n# Part 2\n\nSupport more advanced operators such as `^`,`log`, derivatives, bit shifts, booleans, or whatever you can come up with.  This part is more open, so feel free to show off your additions.\n\nExamples of extensions:\n\n    x^2 * x^3 = x^5\n    (x + 2)^(y + 2) = 4x(2 + x)^y + 4(2 + x)^y + (2 + x)^y * x^2\n    !(a &amp;&amp; b) = !a || !b\n    x &lt;&lt; 1 &lt;&lt; 2 = x &lt;&lt; 3\n    \n\t\t\n# Part 3\n\nYour solution should create a proof of the steps your program took to show the expression was valid or invalid.\n\nStatements|Reasons\n:--|:--\n2(x + y) + 0 = 2x + 2y | 1. Given\n2x + 2y + 0 = 2x + 2y | 2. Distributive Property of Multiplication\n2x + 2y = 2x + 2y | 3. Identity Property of Addition\n\n\nStatements|Reasons\n:--|:--\nx + y = a + b|1. Given\n3 = 7|2. Contradiction for x=1, y=2, a=3, b=4\n\n# Notes\n\nI'm inclined to treat undefined expressions as not equivalent to anything.  Such as divide by zero:\n\n    x/0 = x/0\n\n# thanks\n\nThanks to u/wizao for submitting this idea through r/dailyprogrammer_ideas ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "557wyy", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "name": "t3_557wyy", "score": 75, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/557wyy/20160930_challenge_285_hard_math_proofs/", "locked": false, "stickied": false, "created": 1475271262.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/557wyy/20160930_challenge_285_hard_math_proofs/", "author_flair_text": "3 3", "quarantine": false, "title": "[2016-09-30] Challenge #285 [Hard] Math Proofs", "created_utc": 1475242462.0, "link_flair_text": null, "distinguished": null, "num_comments": 30, "visited": false, "num_reports": null, "ups": 75}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The goal of this challenge is to encode and decode records in a compact and/or efficient self contained manner.  Because the more I type, the more confusing the challenge is interpreted, I will avoid discussing process as much as I can.&lt;/p&gt;\n\n&lt;h1&gt;1. fixed length records: birthdays&lt;/h1&gt;\n\n&lt;p&gt;Database systems prefer tables of fixed length records because it is easy and fast to retrieve any single record that way.&lt;/p&gt;\n\n&lt;p&gt;A customer birthday is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;A tuple of Year, Month, Day&lt;/li&gt;\n&lt;li&gt;The year is in the past, and can be assumed to not be earlier than 1900&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So the year, month, day can be stored as 1 byte each, and this arrangement makes it easiest to search on year or other components.  (the year can be coded as the offset to 1900)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;challenge&lt;/strong&gt; (encode following dates)&lt;/p&gt;\n\n&lt;p&gt;1944/11/22&lt;br/&gt;\n1982/3/14&lt;br/&gt;\n1986/2/11  &lt;/p&gt;\n\n&lt;h1&gt;2. add a header to the file&lt;/h1&gt;\n\n&lt;p&gt;Database management software needs to know what is in the file.  Create a strategy to describe what is in the file, such that it can be read and written to.&lt;/p&gt;\n\n&lt;p&gt;Information to include in the header:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Fixed vs variable sized records (above is fixed)&lt;/li&gt;\n&lt;li&gt;code to unpack into native format&lt;/li&gt;\n&lt;li&gt;code to pack from native into file format&lt;/li&gt;\n&lt;li&gt;method to tell where header ends and data begins.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;TIP: An easy way to provide language agnostic packing code is to provide a minimum and maximum allowed range to integer (or float for that matter) data.&lt;/p&gt;\n\n&lt;h1&gt;3. variable length fields/records&lt;/h1&gt;\n\n&lt;p&gt;A subject touched upon in Monday&amp;#39;s part 1 challenge, was that there are 2 general strategies to coding the field length of variable length data with the data.  There are in fact 3 strategies:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;interleave length with data elements.  Disadvantage is that file must be read sequentially to retrieve any element.&lt;/li&gt;\n&lt;li&gt;place a key of lengths or (easily derived) offsets to data starts as a header element to the data.  Relatively fast specific data access.  More memory used.  2 updates needed when record/field changed.&lt;/li&gt;\n&lt;li&gt;Use a seperator, non-legal-data-value.  Still sequential read disadvantage, but a faster sequential read.  Requires that a non-legal-data value or escape sequence exists.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;FYI, most database (and in memory) systems allocate variable string data by using a &amp;quot;too big&amp;quot; text field and left aligning data within the larger space.  Provides quickest indexed access and in place updates. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;challenge for 3 fields:  FirstName LastName DateOfBirth&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Bill Gates 1947/1/14&lt;br/&gt;\nMark Zuckerberg 1987/11/4&lt;br/&gt;\nSteve Jobs 1955/3/7&lt;/p&gt;\n\n&lt;p&gt;Where firstname and lastname are variable length fields.  Can use whatever strategy you wish, but include a header that self describes how to unpack the data into native memory.&lt;/p&gt;\n\n&lt;h1&gt;4. Multiple variable file&lt;/h1&gt;\n\n&lt;p&gt;Variation to number 3 (and may do one or the other), instead of encoding a table as a single variable, encode the data as 3 variables which are each lists of 3 items.  This is known as an inverted table or column-oriented database.&lt;/p&gt;\n\n&lt;p&gt;The 3 variables correspond to FirstName, LastName, DateofBirth&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "The goal of this challenge is to encode and decode records in a compact and/or efficient self contained manner.  Because the more I type, the more confusing the challenge is interpreted, I will avoid discussing process as much as I can.\n\n# 1. fixed length records: birthdays\n\nDatabase systems prefer tables of fixed length records because it is easy and fast to retrieve any single record that way.\n\nA customer birthday is:\n\n* A tuple of Year, Month, Day\n* The year is in the past, and can be assumed to not be earlier than 1900\n\nSo the year, month, day can be stored as 1 byte each, and this arrangement makes it easiest to search on year or other components.  (the year can be coded as the offset to 1900)\n\n\n**challenge** (encode following dates)\n\n1944/11/22  \n1982/3/14  \n1986/2/11  \n\n#2. add a header to the file\n\nDatabase management software needs to know what is in the file.  Create a strategy to describe what is in the file, such that it can be read and written to.\n\nInformation to include in the header:\n\n* Fixed vs variable sized records (above is fixed)\n* code to unpack into native format\n* code to pack from native into file format\n* method to tell where header ends and data begins.\n\nTIP: An easy way to provide language agnostic packing code is to provide a minimum and maximum allowed range to integer (or float for that matter) data.\n\n# 3. variable length fields/records\n\nA subject touched upon in Monday's part 1 challenge, was that there are 2 general strategies to coding the field length of variable length data with the data.  There are in fact 3 strategies:\n\n1. interleave length with data elements.  Disadvantage is that file must be read sequentially to retrieve any element.\n2. place a key of lengths or (easily derived) offsets to data starts as a header element to the data.  Relatively fast specific data access.  More memory used.  2 updates needed when record/field changed.\n3. Use a seperator, non-legal-data-value.  Still sequential read disadvantage, but a faster sequential read.  Requires that a non-legal-data value or escape sequence exists.\n\n\nFYI, most database (and in memory) systems allocate variable string data by using a \"too big\" text field and left aligning data within the larger space.  Provides quickest indexed access and in place updates. \n\n**challenge for 3 fields:  FirstName LastName DateOfBirth**:\n\nBill Gates 1947/1/14  \nMark Zuckerberg 1987/11/4  \nSteve Jobs 1955/3/7\n\nWhere firstname and lastname are variable length fields.  Can use whatever strategy you wish, but include a header that self describes how to unpack the data into native memory.\n\n# 4. Multiple variable file\n\nVariation to number 3 (and may do one or the other), instead of encoding a table as a single variable, encode the data as 3 variables which are each lists of 3 items.  This is known as an inverted table or column-oriented database.\n\nThe 3 variables correspond to FirstName, LastName, DateofBirth", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "54wihd", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "name": "t3_54wihd", "score": 55, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/54wihd/20160928_challenge_285_intermediate_cross/", "locked": false, "stickied": false, "created": 1475100821.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/54wihd/20160928_challenge_285_intermediate_cross/", "author_flair_text": "3 3", "quarantine": false, "title": "[2016-09-28] Challenge #285 [Intermediate] Cross Platform/Language Data Encoding part 2", "created_utc": 1475072021.0, "link_flair_text": null, "distinguished": null, "num_comments": 4, "visited": false, "num_reports": null, "ups": 55}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;We will make a binary byte oriented encoding of data that is self describing and extensible, and aims to solve the following problems:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;portability between 32 and 64 (and any other) bit systems, and languages, and endian-ness.&lt;/li&gt;\n&lt;li&gt;type system independent of underlying language.&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;Allow heterogeneous arrays (differing types of array elements) where the underlying language has poor support for them.&lt;/li&gt;\n&lt;li&gt;leverage power of homogeneous arrays in a language.&lt;/li&gt;\n&lt;li&gt;support records regardless of underlying language (array of records is homogeneous, even though a record is a heterogeneous list of fields)&lt;/li&gt;\n&lt;li&gt;Allow ragged arrays (a table where each row is a list, but the rows do not have a uniform size (or shape))&lt;/li&gt;\n&lt;li&gt;Provide basic in memory compression.  Allow deferred decoding of partial data.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;1.  base64 encoding (used in later challenges)&lt;/h1&gt;\n\n&lt;p&gt;To read and write binary data on reddit, we will use base64 encoding, &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/4xy6i1/20160816_challenge_279_easy_uuencoding/\"&gt;https://www.reddit.com/r/dailyprogrammer/comments/4xy6i1/20160816_challenge_279_easy_uuencoding/&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;2. Extendible byte base.&lt;/h1&gt;\n\n&lt;p&gt;Any size integer can be coded into a variable byte array by using the maximum byte value as a marker to add the next byte value to decode the total.  &lt;/p&gt;\n\n&lt;p&gt;This is useful for coding numbers that you think can be limited to around 255 or close to it, without being &amp;quot;hard constrained&amp;quot; by that limit.  &amp;quot;256 possible op codes (or characters) ought to be enough for everyone forever thinking&amp;quot; &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;unsigned byte input&lt;/strong&gt;&lt;br/&gt;\n12&lt;br/&gt;\n255&lt;br/&gt;\n256&lt;br/&gt;\n510&lt;br/&gt;\n512 44 1024&lt;/p&gt;\n\n&lt;p&gt;last input is a list of 3 integers to encode&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;sample outputs&lt;/strong&gt;&lt;br/&gt;\n12&lt;br/&gt;\n255 0&lt;br/&gt;\n255 1&lt;br/&gt;\n255 255 0&lt;br/&gt;\n255 255 2 44 255 255 255 255 4&lt;/p&gt;\n\n&lt;p&gt;every element that is not 255 marks the end of &amp;quot;that integer&amp;quot; in a list.  You should also write a decoder that transforms output into input.&lt;/p&gt;\n\n&lt;h1&gt;3. multibyte and variable byte encodings&lt;/h1&gt;\n\n&lt;p&gt;Instead of a single byte target encoding, 2,4,8 and variable defined byte sizes are also desirable to cover integers with larger ranges.  An account balance might have a 40 bit practical limit, but you might not guarantee it forever.  64 bits might not be enough for Zimbabwe currency balances for example.&lt;/p&gt;\n\n&lt;p&gt;For compressing a list of numbers, often it is useful to set the whole list to one &amp;quot;byte size&amp;quot;.  Other choices include, &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;setting an enum/table of possible byte size codings of 1 2 4 8  sizes, and then encoding, the number of elements, the table/enum size and definition, and then 2 lists (enum key, data items)&lt;/li&gt;\n&lt;li&gt;interleave bytesize, data&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The latter will often be longer for long lists, but does not encode the table so is simpler to encode/decode.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Encoding format for table definition:&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;4 bytes: first 30 bits - length of list.  last 2 bits: key into 1 2 4 8.  If first 30 bits are max value, then following 4 bytes are added to count until a non-max value is taken.  Similar to challenge #2.&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;list of byte lengths defined by key in 1.  If last 2 bits of 1 are 3 (signifies up to 8 distinct integer sizes), then this list has 8 items.  If there only 6 distinct integer size codings, then the last 2 items in this list would be ignored and set to 0.  Values over 255 are encoded as in challenge 2.&lt;/li&gt;\n&lt;li&gt;list of ordered data encodings in boolean form, if there are more than 1.  1 bit for 2, 2 bits for 4, 3 bits for 8.&lt;/li&gt;\n&lt;li&gt;list of data elements. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;challenges&lt;/strong&gt;&lt;br/&gt;\nencode list of integers from 0 to 1025 using 8 or 16 bit variable encoding.  With the shortest encoding that will contain the number.  Just print the sum of all the bytes as result for output brevity.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;solution&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;first 4 bytes are (1025 * 4) + 1 (leading 0 bytes for smaller than &amp;quot;full size&amp;quot; numbers)&lt;/li&gt;\n&lt;li&gt;2 byte list: 1  2&lt;/li&gt;\n&lt;li&gt;0 for first 256 bits, 1 for remaining bits (total 1032 bits long with padding)&lt;/li&gt;\n&lt;li&gt;256 + (769 * 2) bytes long encoding of the numbers.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;4. balanced signed numbers&lt;/h1&gt;\n\n&lt;p&gt;Some numbers are negative.  The common computer encoding for signed number ranges is to subtract half the max power of 2 from the value.  A signed byte has range -128 to 127, where a 0 value corresponds to -128 (in our encoding).&lt;/p&gt;\n\n&lt;p&gt;For numbers outside this range encoded in a single byte, the process is to take the first byte to determine the sign, and then following bytes add or subtract up to 255 per byte until a non 255 value is reached.&lt;/p&gt;\n\n&lt;h1&gt;5. unbalanced signed numbers&lt;/h1&gt;\n\n&lt;p&gt;Instead of the midpoint marking 0, a byte can encode a value within any defined range.\nAnother important application is to use &amp;quot;negative&amp;quot; numbers as codes of some sort.  These include:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;An expectation that negative numbers are less frequent and smaller relative to 0&lt;/li&gt;\n&lt;li&gt;coding special values such as null, infinity, undeterminable (0/0)&lt;/li&gt;\n&lt;li&gt;Using codes to hint at extended byte encodings and sign of the number, or even data type&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;sample 0 index codes&lt;/strong&gt; (for 16 reserved codes) (new paragraph for multiline explained codes)&lt;br/&gt;\nNull&lt;br/&gt;\nInfinity&lt;br/&gt;\nNegative Infinity&lt;br/&gt;\nNegative 1 byte&lt;br/&gt;\nNegative 2 bytes&lt;br/&gt;\nNegative 4 bytes&lt;br/&gt;\nNegative 8 bytes&lt;br/&gt;\nNegative custom byte length (value is encoded into 2 numbers.  First is byte length (in 255 terminated bytes, followed by that number of bytes to represent the number)  &lt;/p&gt;\n\n&lt;p&gt;Positive 1 byte (first number indicates range of 468 to 723).  467 could have been encoded as 255 254 without this special code.&lt;/p&gt;\n\n&lt;p&gt;Positive 2 byte&lt;br/&gt;\nPositive 4 byte&lt;br/&gt;\nPositive 8 byte&lt;br/&gt;\nPositive 16 byte&lt;br/&gt;\nPositive 64 byte&lt;br/&gt;\nPositive custom byte length (3 to 262 excluding other defined lengths)\nPositive custom 2 byte length (16 bit unsigned number defines byte length of number, followed by encoded number)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;sample inputs&lt;/strong&gt;&lt;br/&gt;\n10&lt;br/&gt;\n123123&lt;br/&gt;\n-55&lt;br/&gt;\nNull &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;sample output&lt;/strong&gt;&lt;br/&gt;\n26&lt;br/&gt;\n9 123123&lt;br/&gt;\n3 54 (minimum range value is -1)&lt;br/&gt;\n0  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;challenge input&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;p&gt;192387198237192837192837192387123817239182737 _44 981237123&lt;/p&gt;\n\n&lt;p&gt;array of 3 numbers (_44 is -44) to be encoded &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "We will make a binary byte oriented encoding of data that is self describing and extensible, and aims to solve the following problems:\n\n* portability between 32 and 64 (and any other) bit systems, and languages, and endian-ness.\n* type system independent of underlying language.  \n* Allow heterogeneous arrays (differing types of array elements) where the underlying language has poor support for them.\n* leverage power of homogeneous arrays in a language.\n* support records regardless of underlying language (array of records is homogeneous, even though a record is a heterogeneous list of fields)\n* Allow ragged arrays (a table where each row is a list, but the rows do not have a uniform size (or shape))\n* Provide basic in memory compression.  Allow deferred decoding of partial data.\n\n# 1.  base64 encoding (used in later challenges)\n\nTo read and write binary data on reddit, we will use base64 encoding, https://www.reddit.com/r/dailyprogrammer/comments/4xy6i1/20160816_challenge_279_easy_uuencoding/\n\n# 2. Extendible byte base.\n\nAny size integer can be coded into a variable byte array by using the maximum byte value as a marker to add the next byte value to decode the total.  \n\nThis is useful for coding numbers that you think can be limited to around 255 or close to it, without being \"hard constrained\" by that limit.  \"256 possible op codes (or characters) ought to be enough for everyone forever thinking\" \n\n**unsigned byte input**  \n12  \n255  \n256  \n510  \n512 44 1024\n\nlast input is a list of 3 integers to encode\n\n**sample outputs**  \n12  \n255 0  \n255 1  \n255 255 0  \n255 255 2 44 255 255 255 255 4\n\nevery element that is not 255 marks the end of \"that integer\" in a list.  You should also write a decoder that transforms output into input.\n\n\n# 3. multibyte and variable byte encodings\n\nInstead of a single byte target encoding, 2,4,8 and variable defined byte sizes are also desirable to cover integers with larger ranges.  An account balance might have a 40 bit practical limit, but you might not guarantee it forever.  64 bits might not be enough for Zimbabwe currency balances for example.\n\nFor compressing a list of numbers, often it is useful to set the whole list to one \"byte size\".  Other choices include, \n\n* setting an enum/table of possible byte size codings of 1 2 4 8  sizes, and then encoding, the number of elements, the table/enum size and definition, and then 2 lists (enum key, data items)\n* interleave bytesize, data\n\nThe latter will often be longer for long lists, but does not encode the table so is simpler to encode/decode.\n\n**Encoding format for table definition:**  \n\n1. 4 bytes: first 30 bits - length of list.  last 2 bits: key into 1 2 4 8.  If first 30 bits are max value, then following 4 bytes are added to count until a non-max value is taken.  Similar to challenge #2.  \n2. list of byte lengths defined by key in 1.  If last 2 bits of 1 are 3 (signifies up to 8 distinct integer sizes), then this list has 8 items.  If there only 6 distinct integer size codings, then the last 2 items in this list would be ignored and set to 0.  Values over 255 are encoded as in challenge 2.\n3. list of ordered data encodings in boolean form, if there are more than 1.  1 bit for 2, 2 bits for 4, 3 bits for 8.\n4. list of data elements. \n\n**challenges**  \nencode list of integers from 0 to 1025 using 8 or 16 bit variable encoding.  With the shortest encoding that will contain the number.  Just print the sum of all the bytes as result for output brevity.\n\n**solution**  \n\n1. first 4 bytes are (1025 * 4) + 1 (leading 0 bytes for smaller than \"full size\" numbers)\n2. 2 byte list: 1  2\n3. 0 for first 256 bits, 1 for remaining bits (total 1032 bits long with padding)\n4. 256 + (769 * 2) bytes long encoding of the numbers.\n\n\n# 4. balanced signed numbers\n\nSome numbers are negative.  The common computer encoding for signed number ranges is to subtract half the max power of 2 from the value.  A signed byte has range -128 to 127, where a 0 value corresponds to -128 (in our encoding).\n\nFor numbers outside this range encoded in a single byte, the process is to take the first byte to determine the sign, and then following bytes add or subtract up to 255 per byte until a non 255 value is reached.\n\n# 5. unbalanced signed numbers\n\nInstead of the midpoint marking 0, a byte can encode a value within any defined range.\nAnother important application is to use \"negative\" numbers as codes of some sort.  These include:\n\n* An expectation that negative numbers are less frequent and smaller relative to 0\n* coding special values such as null, infinity, undeterminable (0/0)\n* Using codes to hint at extended byte encodings and sign of the number, or even data type\n\n\n**sample 0 index codes** (for 16 reserved codes) (new paragraph for multiline explained codes)  \nNull  \nInfinity  \nNegative Infinity  \nNegative 1 byte  \nNegative 2 bytes  \nNegative 4 bytes  \nNegative 8 bytes  \nNegative custom byte length (value is encoded into 2 numbers.  First is byte length (in 255 terminated bytes, followed by that number of bytes to represent the number)  \n\nPositive 1 byte (first number indicates range of 468 to 723).  467 could have been encoded as 255 254 without this special code.\n\nPositive 2 byte  \nPositive 4 byte  \nPositive 8 byte  \nPositive 16 byte  \nPositive 64 byte  \nPositive custom byte length (3 to 262 excluding other defined lengths)\nPositive custom 2 byte length (16 bit unsigned number defines byte length of number, followed by encoded number)\n\n**sample inputs**  \n10  \n123123  \n-55  \nNull \n\n**sample output**  \n26  \n9 123123   \n3 54 (minimum range value is -1)  \n0  \n\n**challenge input**  \n\n192387198237192837192837192387123817239182737 _44 981237123\n\narray of 3 numbers (_44 is -44) to be encoded \n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "54lu54", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "name": "t3_54lu54", "score": 45, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1474913913.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/54lu54/20160926_challenge_285_easy_cross/", "locked": false, "stickied": false, "created": 1474940506.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/54lu54/20160926_challenge_285_easy_cross/", "author_flair_text": "3 3", "quarantine": false, "title": "[2016-09-26] Challenge #285 [Easy] Cross Platform/Language Data Encoding part 1", "created_utc": 1474911706.0, "link_flair_text": null, "distinguished": null, "num_comments": 21, "visited": false, "num_reports": null, "ups": 45}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;The basket weaving world championships are finally about to begin, and\neverybody is bubbling with excitement. The tournament will be an intense\nbattle between &lt;strong&gt;16&lt;/strong&gt; people. Each competitor has a weaving skill level,\na positive integer below 10&lt;sup&gt;6&lt;/sup&gt;. We&amp;#39;ll denote the n&lt;sup&gt;th&lt;/sup&gt; person&amp;#39;s skill level\nas &lt;code&gt;A[n]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here\u2019s how the winner of the championship will be decided:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The &lt;em&gt;remaining&lt;/em&gt; competitors are randomly paired off with each other (a\npairing is chosen uniformly from all possible pairings at random).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Each pair has an intense one-on-one weaving battle! The probability that\nperson &lt;code&gt;n&lt;/code&gt; wins a battle against person &lt;code&gt;k&lt;/code&gt; is &lt;code&gt;A[n] / (A[n] + A[k])&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The loser of each one-on-one battle is ejected from the tournament.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Repeat steps 1-3 until only one competitor remains. That remaining person\nwins! (Note that with 16 people there will always be exactly four rounds of\npairings)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can hardly wait for the matches to begin, so you would like to know\nbeforehand the probability that each competitor will win the tournament given\nall their skill levels.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;Your input will be a space separated list of 16 integers in the range 1 to\n10&lt;sup&gt;6&lt;/sup&gt;-1 inclusive.&lt;/p&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;Output 16 real numbers between 0 and 1, where the n&lt;sup&gt;th&lt;/sup&gt; value is the\nprobability that the n&lt;sup&gt;th&lt;/sup&gt; person will win the tournament. Make sure each\nnumber has at least 6 places after the decimal point.&lt;/p&gt;\n\n&lt;h2&gt;Sample Inputs and Outputs&lt;/h2&gt;\n\n&lt;h3&gt;Sample 1 Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Sample 1 Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;0.000106 0.001101 0.003752 0.008352 0.014896 0.023237 0.033171 0.044485\n0.056975 0.070457 0.084769 0.099768 0.115334 0.131363 0.147766 0.164466\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Sample 1 Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;5 10 13 88 45 21 79 9 56 21 90 55 17 35 85 34\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Sample 1 Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;0.000124 0.001200 0.002616 0.180212 0.054654 0.009631 0.151723 0.000867\n0.083360 0.009631 0.186620 0.080611 0.005531 0.032281 0.170648 0.030291\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;If you&amp;#39;re stuck, try these easier versions of the same problem:&lt;/p&gt;\n\n&lt;h2&gt;Intermediate Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;1 2 3 4 5 6 7 8\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Intermediate Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;0.004884 0.024842 0.056171 0.094499 0.136913 0.181597 0.227421 0.273674\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Easy Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;1 2 3 4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Easy Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;0.063862 0.185608 0.312857 0.437672\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Get your code to run as quickly as possible. For languages with a speed\ncomparable to C++, try to get it to run in under 10 seconds.&lt;/p&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge &lt;a href=\"https://redd.it/3drz14\"&gt;was suggested&lt;/a&gt; by &lt;a href=\"/u/Cephian\"&gt;/u/Cephian&lt;/a&gt;. If you\nhave a challenge idea, please share it in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and there&amp;#39;s\na good chance we&amp;#39;ll use it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nThe basket weaving world championships are finally about to begin, and\neverybody is bubbling with excitement. The tournament will be an intense\nbattle between **16** people. Each competitor has a weaving skill level,\na positive integer below 10^(6). We'll denote the n^th person's skill level\nas `A[n]`.\n\nHere\u2019s how the winner of the championship will be decided:\n\n1. The *remaining* competitors are randomly paired off with each other (a\npairing is chosen uniformly from all possible pairings at random).\n\n2. Each pair has an intense one-on-one weaving battle! The probability that\nperson `n` wins a battle against person `k` is `A[n] / (A[n] + A[k])`.\n\n3. The loser of each one-on-one battle is ejected from the tournament.\n\n4. Repeat steps 1-3 until only one competitor remains. That remaining person\nwins! (Note that with 16 people there will always be exactly four rounds of\npairings)\n\nYou can hardly wait for the matches to begin, so you would like to know\nbeforehand the probability that each competitor will win the tournament given\nall their skill levels.\n\n# Formal Inputs and Outputs\n\n## Input description\n\nYour input will be a space separated list of 16 integers in the range 1 to\n10^(6)-1 inclusive.\n\n## Output description\n\nOutput 16 real numbers between 0 and 1, where the n^th value is the\nprobability that the n^th person will win the tournament. Make sure each\nnumber has at least 6 places after the decimal point.\n\n## Sample Inputs and Outputs\n\n### Sample 1 Input\n    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n### Sample 1 Output\n    0.000106 0.001101 0.003752 0.008352 0.014896 0.023237 0.033171 0.044485\n    0.056975 0.070457 0.084769 0.099768 0.115334 0.131363 0.147766 0.164466\n\n### Sample 1 Input\n    5 10 13 88 45 21 79 9 56 21 90 55 17 35 85 34\n### Sample 1 Output\n    0.000124 0.001200 0.002616 0.180212 0.054654 0.009631 0.151723 0.000867\n    0.083360 0.009631 0.186620 0.080611 0.005531 0.032281 0.170648 0.030291\n\n# Bonus\n\nIf you're stuck, try these easier versions of the same problem:\n\n## Intermediate Sample Input\n    1 2 3 4 5 6 7 8\n\n## Intermediate Sample Output\n    0.004884 0.024842 0.056171 0.094499 0.136913 0.181597 0.227421 0.273674\n\n## Easy Sample Input\n    1 2 3 4\n\n## Easy Sample Output\n    0.063862 0.185608 0.312857 0.437672\n\n# Challenge\n\nGet your code to run as quickly as possible. For languages with a speed\ncomparable to C++, try to get it to run in under 10 seconds.\n\n# Credit\n\nThis challenge [was suggested](https://redd.it/3drz14) by /u/Cephian. If you\nhave a challenge idea, please share it in /r/dailyprogrammer_ideas and there's\na good chance we'll use it.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "545a7x", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "G33kDude", "media": null, "name": "t3_545a7x", "score": 47, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/545a7x/20160923_challenge_284_hard_winning_the_tournament/", "locked": false, "stickied": false, "created": 1474673673.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/545a7x/20160923_challenge_284_hard_winning_the_tournament/", "author_flair_text": "1 1", "quarantine": false, "title": "[2016-09-23] Challenge #284 [Hard] Winning the Tournament", "created_utc": 1474644873.0, "link_flair_text": null, "distinguished": null, "num_comments": 24, "visited": false, "num_reports": null, "ups": 47}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Punch (or punched) cards are an archaic form of recording instruction. Many people here may think of them from the early digital computing era, but they actually go back to fairground organs and textile mills in the 19th century! The format most of us are familiar with was originally patented by Hollerith, using stiff card stock. Over the years this format changed slightly and varied on this them, including a diagonal cut corner. For this challenge we&amp;#39;ll focus on the tail end of punch cards with IBM, GE and UNIVAC type cards. &lt;/p&gt;\n\n&lt;p&gt;To use them, a program would be transcribed to the punch cards. Each column represented a single character, 80 columns to the card, 12 rows to the column. The zone rows can be used to have &lt;em&gt;two&lt;/em&gt; punches per column. You can visualize it like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;                  ____________\n                 /\n          /  12 / O\n  Zone rows  11|   O\n          \\/  0|    O\n          /   1|     O\n         /    2|      O\n        /     3|       O\n  Numeric     4|        O\n  rows        5|         O\n        \\     6|          O\n         \\    7|           O\n          \\   8|            O\n           \\  9|             O\n               |______________\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Each card vendor would have an alphabet, an array of characters that are numerically represented by the punches. Here&amp;#39;s an example of the DEC9 simple alphabet showing you the punch codes and the order in which they appear.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;DEC9 &amp;amp;-0123456789ABCDEFGHIJKLMNOPQR/STUVWXYZ:#@&amp;#39;=&amp;quot;[.&amp;lt;(+^!$*);\\],%_&amp;gt;?\n     ________________________________________________________________\n    /&amp;amp;-0123456789ABCDEFGHIJKLMNOPQR/STUVWXYZ:#@&amp;#39;=&amp;quot;[.&amp;lt;(+^!$*);\\],%_&amp;gt;?\n12 / O           OOOOOOOOO                        OOOOOO\n11|   O                   OOOOOOOOO                     OOOOOO\n 0|    O                           OOOOOOOOO                  OOOOOO\n 1|     O        O        O        O\n 2|      O        O        O        O       O     O     O     O\n 3|       O        O        O        O       O     O     O     O\n 4|        O        O        O        O       O     O     O     O\n 5|         O        O        O        O       O     O     O     O\n 6|          O        O        O        O       O     O     O     O\n 7|           O        O        O        O       O     O     O     O\n 8|            O        O        O        O OOOOOOOOOOOOOOOOOOOOOOOO\n 9|             O        O        O        O\n  |__________________________________________________________________\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can see the first 12 characters are represented by a single punch, then the next 9 have two punches (with one in the upper zone), then the next 9 use the next zone as that second punch, the fourth 9 use the next zone as the second punch, then we start on the lower zone for the next sets of 6 with the upper zone punched increasingly.&lt;/p&gt;\n\n&lt;p&gt;For some more information, including from where some of this info was taken, please see &lt;a href=\"http://homepage.cs.uiowa.edu/%7Ejones/cards/codes.html\"&gt;http://homepage.cs.uiowa.edu/~jones/cards/codes.html&lt;/a&gt; or Wikipedia &lt;a href=\"http://en.wikipedia.org/wiki/Punched_card\"&gt;http://en.wikipedia.org/wiki/Punched_card&lt;/a&gt; . &lt;/p&gt;\n\n&lt;p&gt;So, given an alphabet array you should be able to encode a message in a punch card, right? Let&amp;#39;s go back to the punch card! For this challenge, assume the same encoding methods as above given the character array at the top, they&amp;#39;ll only differ in order of characters. &lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;On the first line you&amp;#39;ll be given two words - the punched card identifier, and the alphabet in linear order. Then you&amp;#39;ll be given &lt;em&gt;M&lt;/em&gt;, a single integer on a line, telling you how many cshort messages to represent on that type of punch card. &lt;/p&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit an ASCII art punchcard  in the format above, with the diagonal notch and everything, and the message across the top. &lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;DEC9 &amp;amp;-0123456789ABCDEFGHIJKLMNOPQR/STUVWXYZ:#@&amp;#39;=&amp;quot;[.&amp;lt;(+^!$*);\\],%_&amp;gt;?\n3\nHello, world!\nThis is Reddit&amp;#39;s r/dailyprogrammer challenge. \nWRITE (6,7) FORMAT(13H HELLO, WORLD) STOP END\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nPunch (or punched) cards are an archaic form of recording instruction. Many people here may think of them from the early digital computing era, but they actually go back to fairground organs and textile mills in the 19th century! The format most of us are familiar with was originally patented by Hollerith, using stiff card stock. Over the years this format changed slightly and varied on this them, including a diagonal cut corner. For this challenge we'll focus on the tail end of punch cards with IBM, GE and UNIVAC type cards. \n\nTo use them, a program would be transcribed to the punch cards. Each column represented a single character, 80 columns to the card, 12 rows to the column. The zone rows can be used to have *two* punches per column. You can visualize it like this:\n\n\t                  ____________\n\t                 /\n\t          /  12 / O\n\t  Zone rows  11|   O\n\t          \\/  0|    O\n\t          /   1|     O\n\t         /    2|      O\n\t        /     3|       O\n\t  Numeric     4|        O\n\t  rows        5|         O\n\t        \\     6|          O\n\t         \\    7|           O\n\t          \\   8|            O\n\t           \\  9|             O\n\t               |______________\n\nEach card vendor would have an alphabet, an array of characters that are numerically represented by the punches. Here's an example of the DEC9 simple alphabet showing you the punch codes and the order in which they appear.\n\n    DEC9 &amp;-0123456789ABCDEFGHIJKLMNOPQR/STUVWXYZ:#@'=\"[.&lt;(+^!$*);\\],%_&gt;?\n         ________________________________________________________________\n        /&amp;-0123456789ABCDEFGHIJKLMNOPQR/STUVWXYZ:#@'=\"[.&lt;(+^!$*);\\],%_&gt;?\n    12 / O           OOOOOOOOO                        OOOOOO\n    11|   O                   OOOOOOOOO                     OOOOOO\n     0|    O                           OOOOOOOOO                  OOOOOO\n     1|     O        O        O        O\n     2|      O        O        O        O       O     O     O     O\n     3|       O        O        O        O       O     O     O     O\n     4|        O        O        O        O       O     O     O     O\n     5|         O        O        O        O       O     O     O     O\n     6|          O        O        O        O       O     O     O     O\n     7|           O        O        O        O       O     O     O     O\n     8|            O        O        O        O OOOOOOOOOOOOOOOOOOOOOOOO\n     9|             O        O        O        O\n      |__________________________________________________________________\n\nYou can see the first 12 characters are represented by a single punch, then the next 9 have two punches (with one in the upper zone), then the next 9 use the next zone as that second punch, the fourth 9 use the next zone as the second punch, then we start on the lower zone for the next sets of 6 with the upper zone punched increasingly.\n\nFor some more information, including from where some of this info was taken, please see http://homepage.cs.uiowa.edu/~jones/cards/codes.html or Wikipedia http://en.wikipedia.org/wiki/Punched_card . \n\nSo, given an alphabet array you should be able to encode a message in a punch card, right? Let's go back to the punch card! For this challenge, assume the same encoding methods as above given the character array at the top, they'll only differ in order of characters. \n\n# Input Description\n\nOn the first line you'll be given two words - the punched card identifier, and the alphabet in linear order. Then you'll be given *M*, a single integer on a line, telling you how many cshort messages to represent on that type of punch card. \n\n# Output Description\n\nYour program should emit an ASCII art punchcard  in the format above, with the diagonal notch and everything, and the message across the top. \n\n# Challenge Input\n\n    DEC9 &amp;-0123456789ABCDEFGHIJKLMNOPQR/STUVWXYZ:#@'=\"[.&lt;(+^!$*);\\],%_&gt;?\n\t3\n\tHello, world!\n\tThis is Reddit's r/dailyprogrammer challenge. \n\tWRITE (6,7) FORMAT(13H HELLO, WORLD) STOP END\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "53sw7z", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_53sw7z", "score": 63, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1474462808.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/53sw7z/20160921_challenge_284_intermediate_punch_card/", "locked": false, "stickied": false, "created": 1474489873.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/53sw7z/20160921_challenge_284_intermediate_punch_card/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-09-21] Challenge #284 [Intermediate] Punch Card Creator", "created_utc": 1474461073.0, "link_flair_text": null, "distinguished": null, "num_comments": 29, "visited": false, "num_reports": null, "ups": 63}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Software like Swype and SwiftKey lets smartphone users enter text by &lt;em&gt;dragging&lt;/em&gt; their finger over the on-screen keyboard, rather than tapping on each letter.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.swype.com/content/uploads/2014/09/swype_path.png\"&gt;Example image of Swype&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;ll be given a string of characters representing the letters the user has dragged their finger over.&lt;/p&gt;\n\n&lt;p&gt;For example, if the user wants &amp;quot;rest&amp;quot;, the string of input characters might be &amp;quot;resdft&amp;quot; or &amp;quot;resert&amp;quot;.&lt;/p&gt;\n\n&lt;h1&gt;Input&lt;/h1&gt;\n\n&lt;p&gt;Given the following input strings, find all possible output words 5 characters or longer.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;qwertyuytresdftyuioknn&lt;/li&gt;\n&lt;li&gt;gijakjthoijerjidsdfnokg&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Output&lt;/h1&gt;\n\n&lt;p&gt;Your program should find all possible words (5+ characters) that can be derived from the strings supplied.&lt;/p&gt;\n\n&lt;p&gt;Use &lt;a href=\"http://norvig.com/ngrams/enable1.txt\"&gt;http://norvig.com/ngrams/enable1.txt&lt;/a&gt; as your search dictionary.&lt;/p&gt;\n\n&lt;p&gt;The order of the output words doesn&amp;#39;t matter.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;queen question&lt;/li&gt;\n&lt;li&gt;gaeing garring gathering gating geeing gieing going goring&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;Assumptions about the input strings:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;QWERTY keyboard&lt;/li&gt;\n&lt;li&gt;Lowercase a-z only, no whitespace or punctuation&lt;/li&gt;\n&lt;li&gt;The first and last characters of the input string will always match the first and last characters of the desired output word&lt;/li&gt;\n&lt;li&gt;Don&amp;#39;t assume users take the most efficient path between letters&lt;/li&gt;\n&lt;li&gt;Every letter of the output word will appear in the input string&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Double letters in the output word &lt;em&gt;might&lt;/em&gt; appear only once in the input string, e.g. &amp;quot;polkjuy&amp;quot; could yield &amp;quot;polly&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;Make your program handle this possibility.&lt;/p&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was submitted by &lt;a href=\"/u/fj2010\"&gt;/u/fj2010&lt;/a&gt;, thank you for this! If you have any challenge ideas please share them in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and there&amp;#39;s a chance we&amp;#39;ll use them. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "\n#Description\n\nSoftware like Swype and SwiftKey lets smartphone users enter text by *dragging* their finger over the on-screen keyboard, rather than tapping on each letter.\n\n[Example image of Swype](http://www.swype.com/content/uploads/2014/09/swype_path.png)\n\nYou'll be given a string of characters representing the letters the user has dragged their finger over.\n\nFor example, if the user wants \"rest\", the string of input characters might be \"resdft\" or \"resert\".\n\n#Input\n\nGiven the following input strings, find all possible output words 5 characters or longer.\n\n1. qwertyuytresdftyuioknn\n2. gijakjthoijerjidsdfnokg\n\n\n#Output\n\nYour program should find all possible words (5+ characters) that can be derived from the strings supplied.\n\nUse http://norvig.com/ngrams/enable1.txt as your search dictionary.\n\nThe order of the output words doesn't matter.\n\n1. queen question\n2. gaeing garring gathering gating geeing gieing going goring\n\n#Notes/Hints\n\nAssumptions about the input strings:\n\n* QWERTY keyboard\n* Lowercase a-z only, no whitespace or punctuation\n* The first and last characters of the input string will always match the first and last characters of the desired output word\n* Don't assume users take the most efficient path between letters\n* Every letter of the output word will appear in the input string\n\n\n#Bonus\n\nDouble letters in the output word *might* appear only once in the input string, e.g. \"polkjuy\" could yield \"polly\".\n\nMake your program handle this possibility.\n\n# Credit\n\nThis challenge was submitted by /u/fj2010, thank you for this! If you have any challenge ideas please share them in /r/dailyprogrammer_ideas and there's a chance we'll use them. ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "53ijnb", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_53ijnb", "score": 81, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/53ijnb/20160919_challenge_284_easy_wandering_fingers/", "locked": false, "stickied": false, "created": 1474333083.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/53ijnb/20160919_challenge_284_easy_wandering_fingers/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-09-19] Challenge #284 [Easy] Wandering Fingers", "created_utc": 1474304283.0, "link_flair_text": null, "distinguished": null, "num_comments": 122, "visited": false, "num_reports": null, "ups": 81}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Imagine you&amp;#39;re in charge of the coast guard for your island nation, but you&amp;#39;re on a budget. You have to minimize how many boats, helicopters and crew members to adequately cover the coast. Each group is responsible for a square area of coastline. &lt;/p&gt;\n\n&lt;p&gt;It turns out this has a mathematical relationship to some interesting mathematics. In fractal geometry, the &lt;a href=\"https://en.wikipedia.org/wiki/Minkowski%E2%80%93Bouligand_dimension\"&gt;Minkowski\u2013Bouligand Dimension&lt;/a&gt;, or box counting dimension, is a means of counting the fractal geometry of a set &lt;em&gt;S&lt;/em&gt; in Euclidian space R&lt;sup&gt;n.&lt;/sup&gt; Less abstractly, imagine the set &lt;em&gt;S&lt;/em&gt; laid out in an evenly space grid. The box counting dimension would be the minimum number of square tiles required to cover the set.&lt;/p&gt;\n\n&lt;p&gt;More realistically, when doing this counting you&amp;#39;ll wind up with some partial tiles and have to overlap, and that&amp;#39;s OK - overlapping boxes are fine, gaps in coastal coverage are not. What you want to do is to minimize the number of tiles overall. It&amp;#39;s easy over estimate, it&amp;#39;s another to minimize. &lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given two things: a tile size N representing the side of the square, and an ASCII art map showing you the coastline to cover. &lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;2\n\n*****\n*   *\n*   *\n*   *\n*****\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit the minimum number of tiles of that size needed to cover the boundary. &lt;/p&gt;\n\n&lt;p&gt;From the above example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;8\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;4\n\n                     **\n                   *   **\n                  *     *\n                 **      *\n                *        *\n               **         *\n              *            *\n             *            *\n              **        **\n                *      *\n              **        ***\n             *             *\n            *               *\n          **                *\n         *                   **\n        **                     *\n      **                        *\n     *                        **\n      *                     **\n       *                 ***\n        **              *\n       *                 *\n     **                   **\n    *                 ****\n     **         ******           \n       *********   \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nImagine you're in charge of the coast guard for your island nation, but you're on a budget. You have to minimize how many boats, helicopters and crew members to adequately cover the coast. Each group is responsible for a square area of coastline. \n\nIt turns out this has a mathematical relationship to some interesting mathematics. In fractal geometry, the [Minkowski\u2013Bouligand Dimension](https://en.wikipedia.org/wiki/Minkowski%E2%80%93Bouligand_dimension), or box counting dimension, is a means of counting the fractal geometry of a set *S* in Euclidian space R^n. Less abstractly, imagine the set *S* laid out in an evenly space grid. The box counting dimension would be the minimum number of square tiles required to cover the set.\n\nMore realistically, when doing this counting you'll wind up with some partial tiles and have to overlap, and that's OK - overlapping boxes are fine, gaps in coastal coverage are not. What you want to do is to minimize the number of tiles overall. It's easy over estimate, it's another to minimize. \n\n# Input Description\n\nYou'll be given two things: a tile size N representing the side of the square, and an ASCII art map showing you the coastline to cover. \n\nExample:\n\n\t2\n\t\n\t*****\n\t*   *\n\t*   *\n\t*   *\n\t*****\n\n# Output Description\n\nYour program should emit the minimum number of tiles of that size needed to cover the boundary. \n\nFrom the above example:\n\n\t8\n\t\n# Challenge Input\n\n\t4\n                          \n\t\t\t\t\t\t **\n\t\t\t\t\t   *   **\n\t\t\t\t\t  *     *\n\t\t\t\t\t **      *\n\t\t\t\t\t*        *\n\t\t\t\t   **         *\n\t\t\t\t  *            *\n\t\t\t\t *            *\n\t\t\t\t  **        **\n\t\t\t\t    *      *\n\t\t\t\t  **        ***\n\t\t\t\t *             *\n\t\t\t\t*               *\n\t\t\t  **                *\n\t\t\t *                   **\n\t\t\t**                     *\n\t\t  **                        *\n\t\t *                        **\n\t\t  *                     **\n\t\t   *                 ***\n\t\t    **              *\n\t       *                 *\n    \t **\t\t\t\t\t  **\n\t\t*                 ****\n\t\t **         ******           \n\t\t   *********   ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "5320ey", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_5320ey", "score": 72, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1474040087.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/5320ey/20160916_challenge_283_hard_guarding_the_coast/", "locked": false, "stickied": false, "created": 1474063102.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/5320ey/20160916_challenge_283_hard_guarding_the_coast/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-09-16] Challenge #283 [Hard] Guarding the Coast", "created_utc": 1474034302.0, "link_flair_text": null, "distinguished": null, "num_comments": 15, "visited": false, "num_reports": null, "ups": 72}}], "after": "t3_5320ey", "before": null}}
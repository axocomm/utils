#!/usr/bin/env ruby

require 'yaml'
require 'nokogiri'
require 'open-uri'
require 'json'

DIR=File.dirname(File.readlink($0))
CONFIG = "#{DIR}/tracking.yml"
USER_AGENT = 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5'
CARRIERS = {
  :dhl => {
    :url_format => 'http://webtrack.dhlglobalmail.com/?trackingnumber=%s',
    :scraper    => ->(h) {
      est = h.css('.est-delivery > p')[0].content
      timeline = h.css('.timeline-last > .timeline-unit')

      last_loc = timeline.css('.timeline-location')[0]
      last_loc = last_loc.content.gsub(/^\W+/, '').gsub(/\W+$/, '')

      last_status = timeline.css('.timeline-description')[0]
      last_status = last_status.content

      {
        :estimate      => est,
        :last_location => last_loc,
        :last_status   => last_status
      }
    }
  },
  :usps => {
    :url_format => 'https://tools.usps.com/go/TrackConfirmAction_input?origTrackNum=%s',
    :scraper    => ->(h) {
      details = h.css('.latest-detail')[0]
      trim = ->(s) { s.gsub(/^\s+/, '').gsub(/\s+$/, '').gsub(/\n/, '') }
      last_date = details.css('.date-time p')[0].content
                    .gsub(/,([^\W])/, ', \1')
      last_status = details.css('.status p')[0].content

      estimate = h.css('.tracking-progress div:last-child li:last-child .value')
      estimate = estimate.nil? ? 'unknown' : trim.(estimate[0].content)

      {
        :estimate    => estimate,
        :last_date   => trim.(last_date),
        :last_status => trim.(last_status)
      }
    }
  }
}

def get_config
  File.open(CONFIG) do |fh|
    YAML.load(fh.read)
  end
end

def get(url)
  open(url, 'User-Agent' => USER_AGENT)
end

def package_info(packages, name)
  package = packages.detect { |p| p['name'] == name }
  fail "Could not find package '#{name}'" if package.nil?

  carrier = package['carrier'].to_sym
  fail "Don't know how to track '#{carrier}'" unless CARRIERS.include?(carrier)

  number = package['number']
  url = CARRIERS[carrier][:url_format] % [number]

  scraper = CARRIERS[carrier][:scraper]

  {
    :package => package,
    :url     => url,
    :scraper  => scraper
  }
end

def track(config, name)
  names = name ? [name] : config['packages'].map { |x| x['name'] }
  names.inject({}) do |acc, n|
    params = package_info(config['packages'], n)
    h = Nokogiri::HTML(get(params[:url]))
    acc[n] = params[:scraper].(h).merge(params)
    acc
  end
end

$config = get_config or fail "Could not get config"
puts track($config, ARGV[0]).to_json
